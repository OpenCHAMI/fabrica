// Code generated by inventory-codegen. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT
// This file provides event handlers for cross-resource reactions.
//
// Event handlers enable reactive behavior where one resource type
// can react to events from another resource type.
//
// Example: When a BMC connects, automatically discover its FRUs.
package reconcilers

import (
	"github.com/alexlovelltroy/fabrica/pkg/events"
	"github.com/alexlovelltroy/fabrica/pkg/reconcile"
)

// EventHandlerRegistry holds event handlers for cross-resource reactions.
type EventHandlerRegistry struct {
	client   reconcile.ClientInterface
	eventBus events.EventBus
	logger   reconcile.Logger
}

// NewEventHandlerRegistry creates a new event handler registry.
func NewEventHandlerRegistry(client reconcile.ClientInterface, eventBus events.EventBus) *EventHandlerRegistry {
	return &EventHandlerRegistry{
		client:   client,
		eventBus: eventBus,
		logger:   reconcile.NewDefaultLogger(),
	}
}

// RegisterEventHandlers registers all event handlers with the event bus.
//
// This is called during server startup to enable reactive cross-resource behavior.
//
// Parameters:
//   - eventBus: Event bus to register handlers with
//
// Returns:
//   - error: If registration fails
//
// Usage:
//
//	registry := NewEventHandlerRegistry(client, eventBus)
//	if err := registry.RegisterEventHandlers(eventBus); err != nil {
//	    log.Fatal(err)
//	}
func (r *EventHandlerRegistry) RegisterEventHandlers(eventBus events.EventBus) error {
	// Example: Register handler for BMC connection events
	// _, err := eventBus.Subscribe("io.alexlovelltroy.inventory.bmcs.connected", r.handleBMCConnected)
	// if err != nil {
	//     return fmt.Errorf("failed to subscribe to BMC connected events: %w", err)
	// }

	r.logger.Infof("Event handlers registered successfully")
	return nil
}

// Example event handler (commented out - uncomment and modify as needed)
/*
func (r *EventHandlerRegistry) handleBMCConnected(ctx context.Context, event events.Event) error {
	r.logger.Infof("Handling BMC connected event: %s", event.ID())

	// Extract BMC information from event
	bmcUID := event.ResourceUID()

	// Trigger FRU discovery
	// This is where you'd implement cross-resource reactive logic
	// For example:
	//   1. Get the BMC resource
	//   2. Connect to the BMC
	//   3. Discover FRUs
	//   4. Create FRU resources

	r.logger.Infof("FRU discovery triggered for BMC %s", bmcUID)
	return nil
}
*/

// GetRegisteredEventHandlers returns a list of all registered event handler patterns.
//
// This is useful for monitoring and debugging.
func (r *EventHandlerRegistry) GetRegisteredEventHandlers() []string {
	return []string{
		// Add event patterns here as you implement handlers
		// "io.openchami.inventory.bmcs.connected",
		// "io.openchami.inventory.nodes.created",
	}
}
