/*
 * Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
 *
 * SPDX-License-Identifier: MIT
 */

// Code generated by fabrica. DO NOT EDIT.
package server

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/alexlovelltroy/fabrica/pkg/validation"
)

// ValidationMode defines how validation failures are handled
// Configured in .fabrica.yaml: {{.ValidationMode}}
const ValidationMode = "{{.ValidationMode}}" // strict, warn, disabled

// ValidationMiddleware validates resources before processing
//
// Validation modes:
//   - strict: Return 400 on validation failures (production)
//   - warn: Log validation failures but continue (development)
//   - disabled: Skip validation entirely (not recommended)
func ValidationMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Skip if disabled
		if ValidationMode == "disabled" {
			next.ServeHTTP(w, r)
			return
		}

		// Only validate on POST/PUT/PATCH
		if r.Method != http.MethodPost &&
		   r.Method != http.MethodPut &&
		   r.Method != http.MethodPatch {
			next.ServeHTTP(w, r)
			return
		}

		// Validation happens in handlers using ValidateAndRespond()
		// This middleware sets up the validation context
		next.ServeHTTP(w, r)
	})
}

// ValidateAndRespond validates a resource and handles the response based on mode
//
// Returns:
//   - true if validation passed or mode is warn
//   - false if validation failed in strict mode (response already sent)
//
// Usage in handlers:
//   if !ValidateAndRespond(w, r, resource) {
//       return // Response already sent
//   }
func ValidateAndRespond(w http.ResponseWriter, r *http.Request, resource interface{}) bool {
	if err := validation.ValidateResource(resource); err != nil {
		if ValidationMode == "strict" {
			// Return 400 Bad Request
			w.Header().Set("Content-Type", "application/json")
			w.WriteHeader(http.StatusBadRequest)
			json.NewEncoder(w).Encode(map[string]interface{}{
				"error": "Validation failed",
				"details": err.Error(),
			})
			return false
		} else if ValidationMode == "warn" {
			// Log but continue
			log.Printf("WARN: Validation failed for %T: %v", resource, err)
			return true
		}
	}

	return true
}

// ValidationError represents a structured validation error
type ValidationError struct {
	Field   string `json:"field"`
	Message string `json:"message"`
}

// FormatValidationErrors converts validation errors to structured format
func FormatValidationErrors(err error) []ValidationError {
	// This is a simplified version - in practice, parse validator errors
	return []ValidationError{
		{
			Field:   "unknown",
			Message: err.Error(),
		},
	}
}
