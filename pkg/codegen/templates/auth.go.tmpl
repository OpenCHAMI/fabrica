// Code generated by Fabrica. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT

package auth

import (
	"context"
	"log"
	"net/http"
)

// Config holds authentication configuration
type Config struct {
	Enabled    bool   `mapstructure:"enabled"`
	TokenURL   string `mapstructure:"token_url"`
	Issuer     string `mapstructure:"issuer"`
	Audience   string `mapstructure:"audience"`
	SkipVerify bool   `mapstructure:"skip_verify"`
}

// DefaultConfig returns default auth configuration
func DefaultConfig() Config {
	return Config{
		Enabled:    true,
		TokenURL:   "",
		Issuer:     "",
		Audience:   "",
		SkipVerify: true, // For demo purposes
	}
}

// AuthInfo represents authentication information
type AuthInfo struct {
	UserID   string
	Username string
	Roles    []string
	Token    string
}

// ContextKey is used for storing auth info in context
type ContextKey string

const AuthContextKey ContextKey = "auth"

// TokenSmithMiddleware provides JWT authentication
func TokenSmithMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// For now, this is a placeholder that allows all requests
		// In a real implementation, this would validate JWT tokens
		log.Println("TokenSmith middleware - placeholder implementation")

		// Extract token from Authorization header
		token := r.Header.Get("Authorization")
		if token != "" {
			// Remove "Bearer " prefix if present
			if len(token) > 7 && token[:7] == "Bearer " {
				token = token[7:]
			}

			// For demo purposes, create a dummy auth info
			auth := &AuthInfo{
				UserID:   "demo-user",
				Username: "demo",
				Roles:    []string{"admin"},
				Token:    token,
			}

			// Add auth info to context
			ctx := context.WithValue(r.Context(), AuthContextKey, auth)
			r = r.WithContext(ctx)
		}

		next.ServeHTTP(w, r)
	})
}

// GetAuthFromContext extracts auth info from request context
func GetAuthFromContext(ctx context.Context) (*AuthInfo, bool) {
	auth, ok := ctx.Value(AuthContextKey).(*AuthInfo)
	return auth, ok
}

// RequireAuth middleware ensures authentication is present
func RequireAuth(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		auth, ok := GetAuthFromContext(r.Context())
		if !ok || auth == nil {
			http.Error(w, "Authentication required", http.StatusUnauthorized)
			return
		}
		next.ServeHTTP(w, r)
	})
}