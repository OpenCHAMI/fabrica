// Code generated by codegen. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT
//
// This file provides a Cobra-based CLI for the {{.ProjectName}} API.
// Generated from: pkg/codegen/templates/client-cmd.go.tmpl
//
// To modify the CLI:
//   1. Edit the template file: pkg/codegen/templates/client-cmd.go.tmpl
//   2. Run 'make generate-client-cmd' to regenerate
//   3. Do NOT edit this file directly - changes will be lost
//
// Generated commands for each resource:
{{range .Resources}}//   - client {{toLower .Name}} [list|get|create|update|patch|delete]
{{end}}//
// Global flags (available for all commands):
//   --server       Server URL (env: {{toUpper .ProjectName}}_SERVER)
//   --timeout      Request timeout (env: {{toUpper .ProjectName}}_TIMEOUT)
//   --output, -o   Output format: table, json, yaml (env: {{toUpper .ProjectName}}_OUTPUT)
//   --version, -v  API version to request: v1, v2beta1, etc. (env: {{toUpper .ProjectName}}_VERSION)
//   --config       Config file path (default: ~/.{{.ProjectName}}-cli.yaml)
//
// Configuration sources (in order of precedence):
//   1. Command-line flags
//   2. Environment variables ({{toUpper .ProjectName}}_*)
//   3. Config file (~/.{{.ProjectName}}-cli.yaml)
//   4. Default values
//
// Usage examples:
{{if .Resources}}//   # List all {{(index .Resources 0).PluralName}} (default version)
//   client {{toLower (index .Resources 0).Name}} list
//
//   # List {{(index .Resources 0).PluralName}} with specific version
//   client {{toLower (index .Resources 0).Name}} list --version v2beta1
//
//   # Get {{(index .Resources 0).Name}} as v1
//   client {{toLower (index .Resources 0).Name}} get <uid> --version v1
//
//   # Create from JSON file with version
//   cat {{toLower (index .Resources 0).Name}}.json | client {{toLower (index .Resources 0).Name}} create --version v2beta1
//
//   # Create from inline JSON
//   client {{toLower (index .Resources 0).Name}} create --spec '{"name":"{{toLower (index .Resources 0).Name}}-01","description":"Example {{(index .Resources 0).Name}}"}'
//
//   # Use environment variables
//   export {{toUpper .ProjectName}}_SERVER=https://{{.ProjectName}}.example.com
//   export {{toUpper .ProjectName}}_VERSION=v2beta1
//   client {{toLower (index .Resources 0).Name}} list{{else}}//   # Use environment variables
//   export {{toUpper .ProjectName}}_SERVER=https://{{.ProjectName}}.example.com
//   export {{toUpper .ProjectName}}_VERSION=v2beta1
//   client resource list{{end}}
//
// To add custom commands:
//   1. Add command definition in template after resource commands
//   2. Register it in init() function
//
// To change output formatting:
//   1. Modify printOutput function to add new formats
//   2. Update output flag validation
//
// To add authentication:
//   1. Add auth flags (--token, --username, etc.)
//   2. Modify getClient to configure auth in http.Client
//   3. Add auth headers in client package
//
package main

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"{{.ModulePath}}/pkg/client"
)

var (
	cfgFile    string
	serverURL  string
	timeout    time.Duration
	output     string
	apiVersion string
)

func main() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}

var rootCmd = &cobra.Command{
	Use:   filepath.Base(os.Args[0]),
	Short: "{{.ProjectName}} CLI",
	Long:  `A command-line interface for managing {{.ProjectName}} resources.`,
}

func init() {
	cobra.OnInitialize(initConfig)

	// Global flags
	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.{{.ProjectName}}-cli.yaml)")
	rootCmd.PersistentFlags().StringVar(&serverURL, "server", "http://localhost:8080", "{{.ProjectName}} server URL")
	rootCmd.PersistentFlags().DurationVar(&timeout, "timeout", 30*time.Second, "request timeout")
	rootCmd.PersistentFlags().StringVarP(&output, "output", "o", "table", "output format: table, json, yaml")
	rootCmd.PersistentFlags().StringVarP(&apiVersion, "version", "v", "", "API version to request (e.g., v1, v2beta1)")

	// Bind flags to viper
	viper.BindPFlag("server", rootCmd.PersistentFlags().Lookup("server"))
	viper.BindPFlag("timeout", rootCmd.PersistentFlags().Lookup("timeout"))
	viper.BindPFlag("output", rootCmd.PersistentFlags().Lookup("output"))
	viper.BindPFlag("version", rootCmd.PersistentFlags().Lookup("version"))

	// Environment variable support
	viper.SetEnvPrefix("{{toUpper .ProjectName}}")
	viper.AutomaticEnv()

	// Add resource commands
	{{range .Resources}}rootCmd.AddCommand({{toLower .Name}}Cmd)
	{{end}}
}

func initConfig() {
	if cfgFile != "" {
		viper.SetConfigFile(cfgFile)
	} else {
		home, err := os.UserHomeDir()
		if err != nil {
			fmt.Fprintf(os.Stderr, "Warning: %v\n", err)
			return
		}

		viper.AddConfigPath(home)
		viper.SetConfigType("yaml")
		viper.SetConfigName(".{{.ProjectName}}-cli")
	}

	if err := viper.ReadInConfig(); err == nil {
		fmt.Fprintln(os.Stderr, "Using config file:", viper.ConfigFileUsed())
	}
}

func getClient() (*client.Client, error) {
	serverURL := viper.GetString("server")
	c, err := client.NewClient(serverURL, nil)
	if err != nil {
		return nil, err
	}

	// Apply version if specified
	version := viper.GetString("version")
	if version != "" {
		c = c.WithVersion(version)
	}

	return c, nil
}

func printOutput(data interface{}) error {
	switch output {
	case "json":
		encoder := json.NewEncoder(os.Stdout)
		encoder.SetIndent("", "  ")
		return encoder.Encode(data)
	case "yaml":
		// TODO: Add YAML support if needed
		return fmt.Errorf("YAML output not yet implemented")
	case "table":
		// Simple table output
		encoder := json.NewEncoder(os.Stdout)
		encoder.SetIndent("", "  ")
		return encoder.Encode(data)
	default:
		return fmt.Errorf("unknown output format: %s", output)
	}
}

// setNestedField sets a field in a nested map using dot notation
// Example: setNestedField(map, "status.health", "OK") sets map["status"]["health"] = "OK"
func setNestedField(target map[string]interface{}, path string, value interface{}) {
	parts := strings.Split(path, ".")
	current := target

	// Navigate to the parent of the target field
	for _, part := range parts[:len(parts)-1] {
		if current[part] == nil {
			current[part] = make(map[string]interface{})
		}
		if nested, ok := current[part].(map[string]interface{}); ok {
			current = nested
		} else {
			// Convert to map if it's not already
			current[part] = make(map[string]interface{})
			current = current[part].(map[string]interface{})
		}
	}

	// Set the final field
	finalField := parts[len(parts)-1]
	if value == nil {
		// For unset operations, we use JSON Merge Patch null semantics
		current[finalField] = nil
	} else if stringValue, ok := value.(string); ok {
		// Try to parse as JSON first, then as string
		var jsonValue interface{}
		if err := json.Unmarshal([]byte(stringValue), &jsonValue); err == nil {
			current[finalField] = jsonValue
		} else {
			current[finalField] = stringValue
		}
	} else {
		current[finalField] = value
	}
}

{{range .Resources}}
// {{.Name}} commands
var {{toLower .Name}}Cmd = &cobra.Command{
	Use:   "{{toLower .Name}}",
	Short: "Manage {{.PluralName}}",
	Long:  `Create, read, update, patch, and delete {{.PluralName}}.`,
}

var {{toLower .Name}}ListCmd = &cobra.Command{
	Use:   "list",
	Short: "List all {{.PluralName}}",
	RunE: func(cmd *cobra.Command, args []string) error {
		c, err := getClient()
		if err != nil {
			return fmt.Errorf("failed to create client: %w", err)
		}

		ctx, cancel := context.WithTimeout(context.Background(), timeout)
		defer cancel()

		items, err := c.Get{{.Name}}s(ctx)
		if err != nil {
			return fmt.Errorf("failed to list {{.PluralName}}: %w", err)
		}

		return printOutput(items)
	},
}

var {{toLower .Name}}GetCmd = &cobra.Command{
	Use:   "get [uid]",
	Short: "Get a {{.Name}} by UID",
	Args:  cobra.ExactArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		c, err := getClient()
		if err != nil {
			return fmt.Errorf("failed to create client: %w", err)
		}

		ctx, cancel := context.WithTimeout(context.Background(), timeout)
		defer cancel()

		item, err := c.Get{{.Name}}(ctx, args[0])
		if err != nil {
			return fmt.Errorf("failed to get {{.Name}}: %w", err)
		}

		return printOutput(item)
	},
}

var {{toLower .Name}}CreateCmd = &cobra.Command{
	Use:   "create",
	Short: "Create a new {{.Name}}",
	Long: `Create a new {{.Name}}.

Examples:
  # Create from stdin
  echo '{{specToJSON .SpecFields}}' | client {{toLower .Name}} create

  # Create with --spec flag
  client {{toLower .Name}} create --spec '{{specToJSON .SpecFields}}'

Spec fields:
{{range .SpecFields}}  {{.JSONName}} ({{.Type}}){{if .Required}} [required]{{end}}
{{end}}`,
	RunE: func(cmd *cobra.Command, args []string) error {
		c, err := getClient()
		if err != nil {
			return fmt.Errorf("failed to create client: %w", err)
		}

		// Read request from flags or stdin
		reqJSON, _ := cmd.Flags().GetString("spec")
		var req client.Create{{.Name}}Request

		if reqJSON == "" {
			// Read from stdin if no spec provided
			decoder := json.NewDecoder(os.Stdin)
			if err := decoder.Decode(&req); err != nil {
				return fmt.Errorf("failed to decode request from stdin: %w", err)
			}
		} else {
			// Parse request from JSON string
			if err := json.Unmarshal([]byte(reqJSON), &req); err != nil {
				return fmt.Errorf("failed to parse request JSON: %w", err)
			}
		}

		ctx, cancel := context.WithTimeout(context.Background(), timeout)
		defer cancel()

		item, err := c.Create{{.Name}}(ctx, req)
		if err != nil {
			return fmt.Errorf("failed to create {{.Name}}: %w", err)
		}

		return printOutput(item)
	},
}

var {{toLower .Name}}UpdateCmd = &cobra.Command{
	Use:   "update [uid]",
	Short: "Update an existing {{.Name}}",
	Long: `Update an existing {{.Name}}.

Examples:
  # Update from stdin
  echo '{{specToJSON .SpecFields}}' | client {{toLower .Name}} update <uid>

  # Update with --spec flag
  client {{toLower .Name}} update <uid> --spec '{{specToJSON .SpecFields}}'

Spec fields:
{{range .SpecFields}}  {{.JSONName}} ({{.Type}}){{if .Required}} [required]{{end}}
{{end}}`,
	Args:  cobra.ExactArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		c, err := getClient()
		if err != nil {
			return fmt.Errorf("failed to create client: %w", err)
		}

		// Read request from flags or stdin
		reqJSON, _ := cmd.Flags().GetString("spec")
		var req client.Update{{.Name}}Request

		if reqJSON == "" {
			// Read from stdin if no spec provided
			decoder := json.NewDecoder(os.Stdin)
			if err := decoder.Decode(&req); err != nil {
				return fmt.Errorf("failed to decode request from stdin: %w", err)
			}
		} else {
			// Parse request from JSON string
			if err := json.Unmarshal([]byte(reqJSON), &req); err != nil {
				return fmt.Errorf("failed to parse request JSON: %w", err)
			}
		}

		ctx, cancel := context.WithTimeout(context.Background(), timeout)
		defer cancel()

		item, err := c.Update{{.Name}}(ctx, args[0], req)
		if err != nil {
			return fmt.Errorf("failed to update {{.Name}}: %w", err)
		}

		return printOutput(item)
	},
}

var {{toLower .Name}}PatchCmd = &cobra.Command{
	Use:   "patch [uid]",
	Short: "Patch a {{.Name}}",
	Long: `Patch an existing {{.Name}} spec using various patch formats.

IMPORTANT: Only the spec portion of the resource can be patched.
Metadata (name, labels, annotations) and status are managed by the API.

Examples:
  # JSON Merge Patch (simple merge) - patch spec fields
  client {{toLower .Name}} patch <uid> --spec '{"manufacturer":"Intel","model":"Updated Model"}'

  # Shorthand patch (dot notation - most convenient)
  client {{toLower .Name}} patch <uid> --set manufacturer=Intel --set model="Updated Model" --unset customField

  # JSON Patch (RFC 6902 - most powerful)
  client {{toLower .Name}} patch <uid> --json-patch '[
    {"op":"replace","path":"/manufacturer","value":"Intel"},
    {"op":"add","path":"/properties/newField","value":"newValue"}
  ]'

  # From stdin (JSON Merge Patch format)
  echo '{"manufacturer":"AMD","partNumber":"RYZEN-9000"}' | client {{toLower .Name}} patch <uid>

Patch Formats:
  --spec        JSON Merge Patch (RFC 7386) - simple object merge
  --set/--unset Shorthand patch - dot notation for convenience
  --json-patch  JSON Patch (RFC 6902) - operation-based patches
  stdin         JSON Merge Patch format

Shorthand Operations (spec fields only):
  --set field=value     Set a spec field value (supports dot notation)
  --unset field         Remove a spec field (supports dot notation)
  --add field=value     Add to spec array field (field must end with '.-')
  --remove field=value  Remove from spec array field

Note: All patch operations target the resource spec only.
Attempts to patch metadata or status fields will be ignored.`,
	Args:  cobra.ExactArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		c, err := getClient()
		if err != nil {
			return fmt.Errorf("failed to create client: %w", err)
		}

		uid := args[0]

		// Get patch flags
		specPatch, _ := cmd.Flags().GetString("spec")
		jsonPatch, _ := cmd.Flags().GetString("json-patch")
		setPairs, _ := cmd.Flags().GetStringArray("set")
		unsetFields, _ := cmd.Flags().GetStringArray("unset")
		addPairs, _ := cmd.Flags().GetStringArray("add")
		removePairs, _ := cmd.Flags().GetStringArray("remove")

		var patchData []byte
		var contentType string

		// Determine patch format and build patch data
		if jsonPatch != "" {
			// JSON Patch (RFC 6902)
			patchData = []byte(jsonPatch)
			contentType = "application/json-patch+json"
		} else if len(setPairs) > 0 || len(unsetFields) > 0 || len(addPairs) > 0 || len(removePairs) > 0 {
			// Shorthand patch - convert to JSON Merge Patch
			patch := make(map[string]interface{})

			// Process --set flags
			for _, setPair := range setPairs {
				parts := strings.SplitN(setPair, "=", 2)
				if len(parts) != 2 {
					return fmt.Errorf("invalid --set format: %s (expected field=value)", setPair)
				}
				setNestedField(patch, parts[0], parts[1])
			}

			// Process --unset flags
			for _, field := range unsetFields {
				setNestedField(patch, field, nil)
			}

			// Process --add flags (add to arrays)
			for _, addPair := range addPairs {
				parts := strings.SplitN(addPair, "=", 2)
				if len(parts) != 2 {
					return fmt.Errorf("invalid --add format: %s (expected field=value)", addPair)
				}
				// For arrays, we'll use JSON Merge Patch append syntax if possible
				// Otherwise convert to JSON Patch
				setNestedField(patch, parts[0], parts[1])
			}

			// Process --remove flags
			for _, removePair := range removePairs {
				parts := strings.SplitN(removePair, "=", 2)
				if len(parts) != 2 {
					return fmt.Errorf("invalid --remove format: %s (expected field=value)", removePair)
				}
				// Remove operations are complex and might need JSON Patch
				// For now, we'll handle simple cases
				return fmt.Errorf("--remove operations require --json-patch format")
			}

			patchBytes, err := json.Marshal(patch)
			if err != nil {
				return fmt.Errorf("failed to marshal shorthand patch: %w", err)
			}
			patchData = patchBytes
			contentType = "application/merge-patch+json"
		} else if specPatch != "" {
			// JSON Merge Patch from --spec
			patchData = []byte(specPatch)
			contentType = "application/merge-patch+json"
		} else {
			// Read from stdin (default to JSON Merge Patch)
			decoder := json.NewDecoder(os.Stdin)
			var patch interface{}
			if err := decoder.Decode(&patch); err != nil {
				return fmt.Errorf("failed to decode patch from stdin: %w", err)
			}
			patchBytes, err := json.Marshal(patch)
			if err != nil {
				return fmt.Errorf("failed to marshal patch: %w", err)
			}
			patchData = patchBytes
			contentType = "application/merge-patch+json"
		}

		ctx, cancel := context.WithTimeout(context.Background(), timeout)
		defer cancel()

		item, err := c.Patch{{.Name}}(ctx, uid, patchData, contentType)
		if err != nil {
			return fmt.Errorf("failed to patch {{.Name}}: %w", err)
		}

		return printOutput(item)
	},
}

var {{toLower .Name}}DeleteCmd = &cobra.Command{
	Use:   "delete [uid]",
	Short: "Delete a {{.Name}}",
	Args:  cobra.ExactArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		c, err := getClient()
		if err != nil {
			return fmt.Errorf("failed to create client: %w", err)
		}

		ctx, cancel := context.WithTimeout(context.Background(), timeout)
		defer cancel()

		if err := c.Delete{{.Name}}(ctx, args[0]); err != nil {
			return fmt.Errorf("failed to delete {{.Name}}: %w", err)
		}

		fmt.Printf("{{.Name}} %s deleted successfully\n", args[0])
		return nil
	},
}

func init() {
	{{toLower .Name}}Cmd.AddCommand({{toLower .Name}}ListCmd)
	{{toLower .Name}}Cmd.AddCommand({{toLower .Name}}GetCmd)
	{{toLower .Name}}Cmd.AddCommand({{toLower .Name}}CreateCmd)
	{{toLower .Name}}Cmd.AddCommand({{toLower .Name}}UpdateCmd)
	{{toLower .Name}}Cmd.AddCommand({{toLower .Name}}PatchCmd)
	{{toLower .Name}}Cmd.AddCommand({{toLower .Name}}DeleteCmd)

	// Add spec flag for create and update commands
	{{toLower .Name}}CreateCmd.Flags().String("spec", "", "{{.Name}} specification in JSON format")
	{{toLower .Name}}UpdateCmd.Flags().String("spec", "", "{{.Name}} specification in JSON format")

	// Add patch command flags
	{{toLower .Name}}PatchCmd.Flags().String("spec", "", "JSON Merge Patch specification")
	{{toLower .Name}}PatchCmd.Flags().String("json-patch", "", "JSON Patch operations (RFC 6902)")
	{{toLower .Name}}PatchCmd.Flags().StringArray("set", nil, "Set field value using dot notation (field=value)")
	{{toLower .Name}}PatchCmd.Flags().StringArray("unset", nil, "Unset field using dot notation")
	{{toLower .Name}}PatchCmd.Flags().StringArray("add", nil, "Add value to array field (field=value)")
	{{toLower .Name}}PatchCmd.Flags().StringArray("remove", nil, "Remove value from array field (field=value)")
}

{{end}}
