// Code generated by fabrica generate. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT
//
// This file provides storage convenience functions for your resources.
// It uses the fabrica storage backend system.
//
// To modify storage behavior:
//   1. Edit pkg/codegen/templates/storage.go.tmpl
//   2. Run 'fabrica generate' to regenerate
//
// To change storage backend:
//   1. Call storage.Init() with a different backend in main.go
//   2. Options: FileBackend, EntBackend (database), or custom backend
//
package storage

import (
	"context"
	"encoding/json"
	"fmt"

	fabricaStorage "github.com/alexlovelltroy/fabrica/pkg/storage"
{{range .Resources}}
	"{{.Package}}"
{{- end}}
)

// Backend is the storage backend used by all storage operations.
// Initialize this in your main.go before using any storage functions.
//
// Example:
//   backend, err := fabricaStorage.NewFileBackend("./data")
//   if err != nil {
//       log.Fatal(err)
//   }
//   storage.Init(backend)
var Backend fabricaStorage.StorageBackend

// Init initializes the storage backend.
// This must be called before using any storage functions.
func Init(backend fabricaStorage.StorageBackend) {
	Backend = backend
}

// InitFileBackend is a convenience function to initialize file-based storage.
// It creates the directory if it doesn't exist.
func InitFileBackend(dataDir string) error {
	backend, err := fabricaStorage.NewFileBackend(dataDir)
	if err != nil {
		return fmt.Errorf("failed to create file backend: %w", err)
	}
	Backend = backend
	return nil
}

// ensureBackend panics if Backend is not initialized.
// This is called by all storage functions to ensure proper initialization.
func ensureBackend() {
	if Backend == nil {
		panic("storage backend not initialized: call storage.Init() or storage.InitFileBackend() in main.go")
	}
}

{{range .Resources}}
// {{.Name}} storage operations

// LoadAll{{.StorageName}}s retrieves all {{.Name}} resources.
//
// Returns:
//   - []{{.TypeName}}: Slice of {{.Name}} resources
//   - error: Any error that occurred during loading
func LoadAll{{.StorageName}}s() ([]{{.TypeName}}, error) {
	ensureBackend()

	rawData, err := Backend.LoadAll(context.Background(), "{{.Name}}")
	if err != nil {
		return nil, fmt.Errorf("failed to load all {{.PluralName}}: %w", err)
	}

	{{camelCase .PluralName}} := make([]{{.TypeName}}, 0, len(rawData))
	for _, raw := range rawData {
		{{camelCase .Name}} := &{{.PackageAlias}}.{{.Name}}{}
		if err := json.Unmarshal(raw, {{camelCase .Name}}); err != nil {
			return nil, fmt.Errorf("failed to unmarshal {{.Name}}: %w", err)
		}
		{{camelCase .PluralName}} = append({{camelCase .PluralName}}, {{camelCase .Name}})
	}

	return {{camelCase .PluralName}}, nil
}

// Load{{.StorageName}} retrieves a single {{.Name}} resource by UID.
//
// Parameters:
//   - uid: Unique identifier of the {{.Name}} resource
//
// Returns:
//   - {{.TypeName}}: The {{.Name}} resource
//   - error: fabricaStorage.ErrNotFound if resource doesn't exist, other errors for failures
func Load{{.StorageName}}(uid string) ({{.TypeName}}, error) {
	ensureBackend()

	rawData, err := Backend.Load(context.Background(), "{{.Name}}", uid)
	if err != nil {
		return nil, fmt.Errorf("failed to load {{.Name}} %s: %w", uid, err)
	}

	{{camelCase .Name}} := &{{.PackageAlias}}.{{.Name}}{}
	if err := json.Unmarshal(rawData, {{camelCase .Name}}); err != nil {
		return nil, fmt.Errorf("failed to unmarshal {{.Name}}: %w", err)
	}

	return {{camelCase .Name}}, nil
}

// Save{{.StorageName}} stores a {{.Name}} resource.
//
// Parameters:
//   - {{camelCase .Name}}: The {{.Name}} resource to save
//
// Returns:
//   - error: Any error that occurred during saving
func Save{{.StorageName}}({{camelCase .Name}} {{.TypeName}}) error {
	ensureBackend()

	data, err := json.Marshal({{camelCase .Name}})
	if err != nil {
		return fmt.Errorf("failed to marshal {{.Name}}: %w", err)
	}

	if err := Backend.Save(context.Background(), "{{.Name}}", {{camelCase .Name}}.Metadata.UID, data); err != nil {
		return fmt.Errorf("failed to save {{.Name}}: %w", err)
	}

	return nil
}

// Update{{.StorageName}} updates an existing {{.Name}} resource.
//
// Parameters:
//   - {{camelCase .Name}}: The {{.Name}} resource to update
//
// Returns:
//   - error: fabricaStorage.ErrNotFound if resource doesn't exist, other errors for failures
func Update{{.StorageName}}({{camelCase .Name}} {{.TypeName}}) error {
	ensureBackend()

	// Check if resource exists first
	exists, err := Backend.Exists(context.Background(), "{{.Name}}", {{camelCase .Name}}.Metadata.UID)
	if err != nil {
		return fmt.Errorf("failed to check {{.Name}} existence: %w", err)
	}
	if !exists {
		return fabricaStorage.ErrNotFound
	}

	data, err := json.Marshal({{camelCase .Name}})
	if err != nil {
		return fmt.Errorf("failed to marshal {{.Name}}: %w", err)
	}

	if err := Backend.Save(context.Background(), "{{.Name}}", {{camelCase .Name}}.Metadata.UID, data); err != nil {
		return fmt.Errorf("failed to update {{.Name}}: %w", err)
	}

	return nil
}

// Delete{{.StorageName}} removes a {{.Name}} resource by UID.
//
// Parameters:
//   - uid: Unique identifier of the {{.Name}} resource
//
// Returns:
//   - error: fabricaStorage.ErrNotFound if resource doesn't exist, other errors for failures
func Delete{{.StorageName}}(uid string) error {
	ensureBackend()

	if err := Backend.Delete(context.Background(), "{{.Name}}", uid); err != nil {
		return fmt.Errorf("failed to delete {{.Name}} %s: %w", uid, err)
	}

	return nil
}

// Exists{{.StorageName}} checks if a {{.Name}} resource exists.
//
// Parameters:
//   - uid: Unique identifier of the {{.Name}} resource
//
// Returns:
//   - bool: true if the resource exists
//   - error: Any error that occurred during the check
func Exists{{.StorageName}}(uid string) (bool, error) {
	ensureBackend()

	exists, err := Backend.Exists(context.Background(), "{{.Name}}", uid)
	if err != nil {
		return false, fmt.Errorf("failed to check {{.Name}} existence: %w", err)
	}

	return exists, nil
}

// List{{.StorageName}}UIDs returns UIDs of all {{.Name}} resources.
//
// Returns:
//   - []string: Array of {{.Name}} resource UIDs
//   - error: Any error that occurred during listing
func List{{.StorageName}}UIDs() ([]string, error) {
	ensureBackend()

	uids, err := Backend.List(context.Background(), "{{.Name}}")
	if err != nil {
		return nil, fmt.Errorf("failed to list {{.Name}} UIDs: %w", err)
	}

	return uids, nil
}

{{end}}
