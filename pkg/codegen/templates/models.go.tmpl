// Code generated by codegen. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT
//
// This file contains request/response models for REST API operations.
// Generated from: pkg/codegen/templates/models.go.tmpl
//
// To modify request/response models:
//   1. Edit the template file: pkg/codegen/templates/models.go.tmpl
//   2. Run 'make dev' to regenerate
//   3. Do NOT edit this file directly - changes will be lost
//
// Generated models for each resource:
//   - ResourceResponse: Single resource response (alias to resource type)
//   - ResourcesResponse: List of resources with pagination info
//   - CreateResourceRequest: Create operation request body
//   - UpdateResourceRequest: Update operation request body
//   - DeleteResponse: Delete operation response
//
// Request structure:
//   - Embeds resource Spec fields inline (json:",inline")
//   - Includes metadata fields (Name, Labels, Annotations)
//   - Uses validation tags for required fields
//
// To add custom validation:
//   1. Add validation tags to template (e.g., validate:"required,email")
//   2. Implement validation middleware in handlers
//
// To add additional fields:
//   1. Modify Create/Update request structs in template
//   2. Update corresponding handlers to process new fields
//
package {{.PackageName}}

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
{{range .Resources}}
	"{{.Package}}"
{{end}}
{{if .RequiresAuth}}
	"github.com/alexlovelltroy/fabrica/pkg/policy"
{{end}}
)

{{range .Resources}}
// {{.Name}}Response represents the response for {{.Name}} operations
type {{.Name}}Response = {{.PackageAlias}}.{{.Name}}

// Create{{.Name}}Request represents a request to create a {{.Name}}
type Create{{.Name}}Request struct {
	{{.SpecType}} `json:",inline"`
	Name          string            `json:"name" validate:"required"`
	Labels        map[string]string `json:"labels,omitempty"`
	Annotations   map[string]string `json:"annotations,omitempty"`
}

// Update{{.Name}}Request represents a request to update a {{.Name}}
type Update{{.Name}}Request struct {
	{{.SpecType}} `json:",inline,omitempty"`
	Name          string            `json:"name,omitempty"`
	Labels        map[string]string `json:"labels,omitempty"`
	Annotations   map[string]string `json:"annotations,omitempty"`
}

{{end}}

// ErrorResponse represents an error response
type ErrorResponse struct {
	Error   string `json:"error"`
	Message string `json:"message,omitempty"`
	Code    int    `json:"code,omitempty"`
}

// DeleteResponse represents a successful deletion response
type DeleteResponse struct {
	Message string `json:"message"`
	UID     string `json:"uid"`
}

// Helper functions for handlers

// respondJSON sends a JSON response
func respondJSON(w http.ResponseWriter, status int, data interface{}) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	if err := json.NewEncoder(w).Encode(data); err != nil {
		http.Error(w, fmt.Sprintf("failed to encode response: %v", err), http.StatusInternalServerError)
	}
}

// respondError sends an error response
func respondError(w http.ResponseWriter, status int, err error) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	response := ErrorResponse{
		Error:   err.Error(),
		Code:    status,
	}
	json.NewEncoder(w).Encode(response)
}

{{if .RequiresAuth}}
// Context key for auth
type contextKey string

const authContextKey contextKey = "auth"

// policyRegistry is the global policy registry for authorization
var policyRegistry = policy.NewPolicyRegistry()

// GetAuthFromContext retrieves the auth context from the request context
func GetAuthFromContext(ctx context.Context) (*policy.AuthContext, bool) {
	auth, ok := ctx.Value(authContextKey).(*policy.AuthContext)
	return auth, ok
}
{{end}}
