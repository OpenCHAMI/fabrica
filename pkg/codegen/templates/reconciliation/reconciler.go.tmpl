// Code generated by fabrica-codegen. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT
// This file provides the generated boilerplate for {{ .Name }} reconciler.
//
// The reconciler pattern enables declarative infrastructure management by:
//   - Automatically reconciling Spec (desired state) with Status (observed state)
//   - Reacting to resource changes via events
//   - Integrating with the workflow engine for complex operations
//
// To customize reconciliation logic, edit {{ .Name | toLower }}_reconciler.go
package reconcilers

import (
	"context"
	"time"

	"github.com/openchami/fabrica/pkg/reconcile"
	"github.com/openchami/fabrica/pkg/events"
	"{{ .Package }}"
)

// {{ .Name }}Reconciler reconciles {{ .Name }} resources.
//
// This reconciler:
//   - Observes {{ .Name }} resources and updates their Status
//   - Emits events when significant state changes occur
//   - Can trigger workflows for complex operations
//   - Runs periodically and on resource changes
//
// The implementation of reconcile{{ .Name }}() is in {{ .Name | toLower }}_reconciler.go
type {{ .Name }}Reconciler struct {
	reconcile.BaseReconciler

	// Custom fields are defined in {{ .Name | toLower }}_reconciler.go
}

// NewDefault{{ .Name }}Reconciler creates a default {{ .Name }} reconciler.
//
// This is called during server startup to register the reconciler.
//
// Parameters:
//   - client: Client for accessing resource storage
//   - eventBus: Event bus for publishing events
//
// Returns:
//   - *{{ .Name }}Reconciler: Initialized reconciler
func NewDefault{{ .Name }}Reconciler(client reconcile.ClientInterface, eventBus events.EventBus) *{{ .Name }}Reconciler {
	return &{{ .Name }}Reconciler{
		BaseReconciler: reconcile.BaseReconciler{
			Client:   client,
			EventBus: eventBus,
			Logger:   reconcile.NewDefaultLogger(),
		},
	}
}

// GetResourceKind returns the resource kind this reconciler handles.
func (r *{{ .Name }}Reconciler) GetResourceKind() string {
	return "{{ .Name }}"
}

// Reconcile brings {{ .Name }} to desired state.
//
// This method is called:
//   - When a {{ .Name }} resource is created/updated/deleted
//   - Periodically (every 5 minutes by default)
//   - When manually triggered via API
//
// The reconciler should:
//   1. Read the Spec (desired state)
//   2. Observe the actual state
//   3. Update Status to reflect observed state
//   4. Take actions to align actual with desired
//   5. Emit events for significant changes
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - resource: The {{ .Name }} resource to reconcile
//
// Returns:
//   - Result: Indicates if/when to requeue
//   - error: If reconciliation failed
func (r *{{ .Name }}Reconciler) Reconcile(ctx context.Context, resource interface{}) (reconcile.Result, error) {
	res := resource.(*{{ .PackageAlias }}.{{ .Name }})

	r.Logger.Debugf("Reconciling {{ .Name }} %s/%s", res.Kind, res.GetUID())

	// Call custom reconciliation logic
	if err := r.reconcile{{ .Name }}(ctx, res); err != nil {
		r.Logger.Errorf("Reconciliation failed for {{ .Name }} %s: %v", res.GetUID(), err)

		// Set error condition
		r.SetCondition(res, "Ready", "False", "ReconcileError", err.Error())

		// Requeue with backoff (30 seconds)
		return reconcile.Result{Requeue: true, RequeueAfter: 30 * time.Second}, err
	}

	// Set success condition
	r.SetCondition(res, "Ready", "True", "ReconcileSuccess", "Reconciliation successful")

	// Update status in storage
	if err := r.UpdateStatus(ctx, res); err != nil {
		r.Logger.Errorf("Failed to update status for {{ .Name }} %s: %v", res.GetUID(), err)
		return reconcile.Result{Requeue: true, RequeueAfter: 10 * time.Second}, err
	}

	// Emit reconciliation event
	eventType := "io.openchami.inventory.{{ .PluralName }}.reconciled"
	if err := r.EmitEvent(ctx, eventType, res); err != nil {
		r.Logger.Warnf("Failed to emit event for {{ .Name }} %s: %v", res.GetUID(), err)
		// Don't fail reconciliation if event emission fails
	}

	// Requeue after 5 minutes for periodic reconciliation
	return reconcile.Result{RequeueAfter: 5 * time.Minute}, nil
}
