// Copyright © 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT
// This file contains user-customizable reconciliation logic for {{ .Name }}.
//
// ⚠️ This file is safe to edit - it will NOT be overwritten by code generation.
package reconcilers

import (
	"context"

	"{{ .Package }}"
)

// reconcile{{ .Name }} contains custom reconciliation logic.
//
// This method is called by the generated Reconcile() orchestration method.
// Implement {{ .Name }}-specific reconciliation logic here.
//
// Guidelines:
//   1. Keep this method idempotent (safe to call multiple times)
//   2. Update Status fields to reflect observed state
//   3. Emit events for significant state changes using r.EmitEvent()
//   4. Use r.Logger for debugging (Infof, Warnf, Errorf, Debugf)
//   5. Return errors for transient failures (will retry with backoff)
//   6. Access storage via r.Client (Get, List, Update, Create, Delete)
//
// Example implementation patterns:
//
// For hardware resources (BMC, Node):
//   - Connect to hardware endpoint
//   - Query current state
//   - Update Status.Connected, Status.Version, Status.Health
//   - Emit events when state changes
//
// For hierarchical resources (Rack, Chassis):
//   - Create/reconcile child resources
//   - Update Status with child counts and references
//   - Emit events when topology changes
//
// Parameters:
//   - ctx: Context for cancellation and timeouts
//   - res: The {{ .Name }} resource to reconcile
//
// Returns:
//   - error: If reconciliation failed (will trigger retry with backoff)
func (r *{{ .Name }}Reconciler) reconcile{{ .Name }}(ctx context.Context, res *{{ .PackageAlias }}.{{ .Name }}) error {
	// TODO: Implement {{ .Name }}-specific reconciliation logic
	//
	// Example:
	//
	//   // 1. Read desired state from Spec
	//   desiredAddress := res.Spec.Address
	//
	//   // 2. Observe actual state (e.g., connect to hardware)
	//   actualState, err := r.observeActualState(ctx, res)
	//   if err != nil {
	//       return fmt.Errorf("failed to observe state: %w", err)
	//   }
	//
	//   // 3. Update Status with observed state
	//   res.Status.Connected = actualState.Connected
	//   res.Status.Version = actualState.Version
	//   res.Status.LastSeen = time.Now().Format(time.RFC3339)
	//
	//   // 4. Emit events for significant changes
	//   if !wasConnected && res.Status.Connected {
	//       eventType := "io.openchami.inventory.{{ .PluralName }}.connected"
	//       if err := r.EmitEvent(ctx, eventType, res); err != nil {
	//           r.Logger.Warnf("Failed to emit event: %v", err)
	//       }
	//   }
	//
	//   return nil

	r.Logger.Infof("{{ .Name }} reconciliation not yet implemented for %s", res.GetUID())

	return nil
}
