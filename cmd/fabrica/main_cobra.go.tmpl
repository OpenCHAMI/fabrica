// Code generated by Fabrica. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT

package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"

	{{if .WithAuth}}
	"github.com/casbin/casbin/v2"
	fabrica_middleware "github.com/alexlovelltroy/fabrica/pkg/middleware"
	{{end}}

	{{if .WithStorage}}

	 "{{.ModulePath}}/internal/storage"
	{{end}}
	{{if eq .StorageType "ent"}}

	 "{{.ModulePath}}/internal/storage/ent"
	 "{{.ModulePath}}/internal/storage/ent/migrate"

	{{if eq .DBDriver "postgres"}}
	_ "github.com/lib/pq"
	{{else if eq .DBDriver "mysql"}}
	_ "github.com/go-sql-driver/mysql"
	{{else if or (eq .DBDriver "sqlite") (eq .DBDriver "sqlite3")}}
	_ "github.com/mattn/go-sqlite3"
	{{end}}
	{{end}}

	{{if .WithEvents}}
	"github.com/alexlovelltroy/fabrica/pkg/events"
	. "{{.ModulePath}}/internal/middleware"
	{{end}}

	{{if .WithReconcile}}
	"github.com/alexlovelltroy/fabrica/pkg/reconcile"
	"{{.ModulePath}}/pkg/reconcilers"
	{{end}}
)

// Config holds all configuration for the service
type Config struct {
	// Server Configuration
	Port         int    `mapstructure:"port"`
	Host         string `mapstructure:"host"`
	ReadTimeout  int    `mapstructure:"read_timeout"`
	WriteTimeout int    `mapstructure:"write_timeout"`
	IdleTimeout  int    `mapstructure:"idle_timeout"`

	{{if .WithStorage}}
	// Storage Configuration
	{{if eq .StorageType "file"}}
	DataDir string `mapstructure:"data_dir"`
	{{else if eq .StorageType "ent"}}
	DatabaseURL string `mapstructure:"database-url"`
	{{end}}
	{{end}}

	{{if .WithAuth}}
	// Authentication Configuration
	AuthEnabled    bool   `mapstructure:"auth_enabled"`
	TokenSmithURL  string `mapstructure:"tokensmith_url"`
	CasbinModelPath string `mapstructure:"casbin_model_path"`
	CasbinPolicyPath string `mapstructure:"casbin_policy_path"`
	{{end}}

	{{if .WithReconcile}}
	// Reconciliation Configuration
	ReconcileEnabled bool `mapstructure:"reconcile_enabled"`
	ReconcileWorkers int  `mapstructure:"reconcile_workers"`
	{{end}}

	// Feature Flags
	{{if .WithMetrics}}
	EnableMetrics bool   `mapstructure:"enable_metrics"`
	MetricsPort   int    `mapstructure:"metrics_port"`
	{{end}}
	Debug bool `mapstructure:"debug"`
}

// DefaultConfig returns the default configuration
func DefaultConfig() *Config {
	return &Config{
		Port:         8080,
		Host:         "0.0.0.0",
		ReadTimeout:  15,
		WriteTimeout: 15,
		IdleTimeout:  60,
		{{if .WithStorage}}
		{{if eq .StorageType "file"}}
		DataDir:      "./data",
		{{else if eq .StorageType "ent"}}
		DatabaseURL:  "{{if eq .DBDriver "sqlite"}}file:./data.db?cache=shared&_fk=1{{else if eq .DBDriver "postgres"}}postgres://localhost/{{.ProjectName}}?sslmode=disable{{else if eq .DBDriver "mysql"}}root:@tcp(localhost:3306)/{{.ProjectName}}?parseTime=true{{end}}",
		{{end}}
		{{end}}
		{{if .WithAuth}}
		AuthEnabled:     true,
		TokenSmithURL:   "http://localhost:3333",
		CasbinModelPath: "./casbin_model.conf",
		CasbinPolicyPath: "./casbin_policy.csv",
		{{end}}
		{{if .WithReconcile}}
		ReconcileEnabled: true,
		ReconcileWorkers: {{.ReconcileWorkers}},
		{{end}}
		{{if .WithMetrics}}
		EnableMetrics: true,
		MetricsPort:   9090,
		{{end}}
		Debug: false,
	}
}

var (
	cfgFile string
	config  *Config
)

func main() {
	if err := rootCmd.Execute(); err != nil {
		log.Fatal(err)
	}
}

var rootCmd = &cobra.Command{
	Use:   "{{.ProjectName}}",
	Short: "{{.Description}}",
	Long:  `{{.ProjectName}} - A Fabrica-generated OpenCHAMI service`,
	RunE:  runServer,
}

var serveCmd = &cobra.Command{
	Use:   "serve",
	Short: "Start the {{.ProjectName}} server",
	Long:  `Start the {{.ProjectName}} HTTP server with the configured options`,
	RunE:  runServer,
}

func init() {
	cobra.OnInitialize(initConfig)

	// Global flags
	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.{{.ProjectName}}.yaml)")
	rootCmd.PersistentFlags().Bool("debug", false, "Enable debug logging")

	// Server flags
	serveCmd.Flags().IntP("port", "p", 8080, "Port to listen on")
	serveCmd.Flags().String("host", "0.0.0.0", "Host to bind to")
	serveCmd.Flags().Int("read-timeout", 15, "Read timeout in seconds")
	serveCmd.Flags().Int("write-timeout", 15, "Write timeout in seconds")
	serveCmd.Flags().Int("idle-timeout", 60, "Idle timeout in seconds")

	{{if .WithStorage}}
	{{if eq .StorageType "file"}}
	serveCmd.Flags().String("data-dir", "./data", "Directory for file storage")
	{{else if eq .StorageType "ent"}}
	serveCmd.Flags().String("database-url", "", "Database connection URL")
	{{end}}
	{{end}}

	{{if .WithAuth}}
	// Authentication flags
	serveCmd.Flags().Bool("auth-enabled", true, "Enable authentication")
	serveCmd.Flags().Bool("auth-non-enforcing", false, "Non-enforcing auth mode (logs only)")
	serveCmd.Flags().String("jwt-public-key", "", "JWT public key for static validation")
	serveCmd.Flags().String("jwks-url", "", "JWKS URL for dynamic key validation")
	serveCmd.Flags().String("jwt-issuer", "", "Expected JWT issuer")
	serveCmd.Flags().String("jwt-audience", "", "Expected JWT audience")
	{{end}}

	{{if .WithMetrics}}
	serveCmd.Flags().Bool("enable-metrics", true, "Enable Prometheus metrics")
	serveCmd.Flags().Int("metrics-port", 9090, "Port for metrics endpoint")
	{{end}}

	// Bind flags to viper
	viper.BindPFlags(serveCmd.Flags())
	viper.BindPFlags(rootCmd.PersistentFlags())

	// Add subcommands
	rootCmd.AddCommand(serveCmd)
	{{if .WithVersion}}
	rootCmd.AddCommand(versionCmd)
	{{end}}
}

func initConfig() {
	config = DefaultConfig()

	if cfgFile != "" {
		viper.SetConfigFile(cfgFile)
	} else {
		// Search for config in home directory
		home, err := os.UserHomeDir()
		cobra.CheckErr(err)

		viper.AddConfigPath(home)
		viper.AddConfigPath(".")
		viper.SetConfigType("yaml")
		viper.SetConfigName(".{{.ProjectName}}")
	}

	// Environment variables
	viper.SetEnvPrefix("{{toUpper .ProjectName}}")
	viper.AutomaticEnv()

	// Read config file if it exists
	if err := viper.ReadInConfig(); err == nil {
		log.Printf("Using config file: %s", viper.ConfigFileUsed())
	}

	// Unmarshal config
	if err := viper.Unmarshal(config); err != nil {
		log.Fatalf("Unable to decode into config struct: %v", err)
	}

	// Set debug logging
	if config.Debug {
		log.SetFlags(log.LstdFlags | log.Lshortfile)
		log.Println("Debug logging enabled")
	}
}

func runServer(cmd *cobra.Command, args []string) error {
	log.Printf("Starting {{.ProjectName}} server...")

	{{if .WithStorage}}
	// Initialize storage backend
	{{if eq .StorageType "file"}}
	if err := storage.InitFileBackend(config.DataDir); err != nil {
	  return fmt.Errorf("failed to initialize file storage: %w", err)
	}
	log.Printf("File storage initialized in %s", config.DataDir)
	{{else if eq .StorageType "ent"}}
	// Connect to database
	client, err := ent.Open("{{.DBDriver}}", config.DatabaseURL)
	if err != nil {
		return fmt.Errorf("failed opening connection to {{.DBDriver}}: %w", err)
	}
	defer client.Close()

	// Run auto-migration
	ctx := context.Background()
	if err := client.Schema.Create(
		ctx,
		migrate.WithDropIndex(true),
		migrate.WithDropColumn(true),
	); err != nil {
		return fmt.Errorf("failed creating schema resources: %w", err)
	}
	log.Println("Database schema migrated successfully")

	// Set Ent client for storage operations
	storage.SetEntClient(client)
	log.Printf("Ent storage initialized with {{.DBDriver}} database")
	{{end}}
	{{end}}

	{{if .WithEvents}}
	// Initialize event system with configuration from environment
	eventConfig := &events.EventConfig{
		Enabled:                true,
		EventTypePrefix:        viper.GetString("event_type_prefix"),
		LifecycleEventsEnabled: viper.GetBool("lifecycle_events_enabled"),
		ConditionEventsEnabled: viper.GetBool("condition_events_enabled"),
	}

	// Use defaults if not configured
	if eventConfig.EventTypePrefix == "" {
		eventConfig.EventTypePrefix = "{{.ProjectName}}.resource"
	}
	if !viper.IsSet("lifecycle_events_enabled") {
		eventConfig.LifecycleEventsEnabled = true
	}
	if !viper.IsSet("condition_events_enabled") {
		eventConfig.ConditionEventsEnabled = true
	}

	// Initialize event configuration
	events.SetEventConfig(eventConfig)

	// Initialize event bridge for condition events
	events.InitializeEventBridge()

	// Initialize event bus for handlers
	if err := InitializeEventBus(); err != nil {
		log.Fatalf("Failed to initialize event bus: %v", err)
	}

	log.Printf("Event system initialized - Lifecycle: %v, Conditions: %v, Prefix: %s",
		eventConfig.LifecycleEventsEnabled, eventConfig.ConditionEventsEnabled, eventConfig.EventTypePrefix)
	{{end}}

	{{if .WithReconcile}}
	// Initialize reconciliation controller
	var controller *reconcile.Controller
	{{if .WithEvents}}
	if config.ReconcileEnabled {
		ctx := context.Background()

		// Initialize event bus
		{{if eq .EventBusType "memory"}}
		eventBus := events.NewInMemoryEventBus(100, {{.ReconcileWorkers}})
		{{else}}
		// TODO: Configure {{.EventBusType}} event bus
		eventBus := events.NewInMemoryEventBus(100, {{.ReconcileWorkers}})
		{{end}}
		eventBus.Start()
		defer eventBus.Close()

		// Create reconciliation controller
		controller = reconcile.NewController(eventBus, storage.Backend)

		// Create storage client for reconcilers
		storageClient := storage.NewStorageClient()

		// Register reconcilers
		if err := reconcilers.RegisterReconcilers(controller, storageClient, eventBus); err != nil {
			log.Fatalf("Failed to register reconcilers: %v", err)
		}

		// Start controller
		if err := controller.Start(ctx); err != nil {
			log.Fatalf("Failed to start reconciliation controller: %v", err)
		}
		defer controller.Stop()

		log.Printf("Reconciliation controller started with %d workers", {{.ReconcileWorkers}})
	}
	{{else}}
	// Reconciliation requires events to be enabled
	log.Printf("Warning: Reconciliation is enabled but events are disabled. Enable --events to use reconciliation.")
	{{end}}
	{{end}}

	// Setup router
	r := chi.NewRouter()

	// Add middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.RequestID)
	r.Use(middleware.RealIP)

	if config.Debug {
		r.Mount("/debug", middleware.Profiler())
	}

	{{if .WithAuth}}
	// Setup authentication middleware
	if config.AuthEnabled {
		// Setup Casbin authorization
		enforcer, err := casbin.NewEnforcer(config.CasbinModelPath, config.CasbinPolicyPath)
		if err != nil {
		   log.Fatalf("Failed to create Casbin enforcer: %v", err)
		}
		casbinMiddleware := fabrica_middleware.CasbinMiddleware(enforcer)

		// Apply auth to protected routes
		r.Route("/api", func(r chi.Router) {
			r.Use(casbinMiddleware)
			// Protected API routes - generated by 'fabrica generate'
			RegisterGeneratedRoutes(r)
		})

		// Public routes (health checks, etc.)
		r.Route("/public", func(r chi.Router) {
			r.Get("/health", healthHandler)
			{{if .WithMetrics}}
			if config.EnableMetrics {
				r.Get("/metrics", metricsHandler)
			}
			{{end}}
		})
	} else {
		log.Println("Authentication disabled")
		RegisterGeneratedRoutes(r)
		r.Get("/health", healthHandler)
	}
	{{else}}
	// Register routes (no authentication) - generated by 'fabrica generate'
	RegisterGeneratedRoutes(r)
	r.Get("/health", healthHandler)
	{{end}}

	{{if .WithMetrics}}
	// Start metrics server if enabled
	if config.EnableMetrics {
		go startMetricsServer()
	}
	{{end}}

	// Create HTTP server
	addr := fmt.Sprintf("%s:%d", config.Host, config.Port)
	server := &http.Server{
		Addr:         addr,
		Handler:      r,
		ReadTimeout:  time.Duration(config.ReadTimeout) * time.Second,
		WriteTimeout: time.Duration(config.WriteTimeout) * time.Second,
		IdleTimeout:  time.Duration(config.IdleTimeout) * time.Second,
	}

	// Start server in goroutine
	go func() {
		log.Printf("Server starting on %s", addr)
		{{if .WithStorage}}
		{{if eq .StorageType "file"}}
		log.Printf("Storage: file backend in %s", config.DataDir)
		{{else if eq .StorageType "ent"}}
		log.Printf("Storage: {{.DBDriver}} database")
		{{end}}
		{{end}}
		{{if .WithAuth}}
		log.Printf("Authentication: %s", map[bool]string{true: "enabled", false: "disabled"}[config.AuthEnabled])
		{{end}}

		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Server failed: %v", err)
		}
	}()

	// Wait for interrupt signal for graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("Server shutting down...")

	// Graceful shutdown with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		return fmt.Errorf("server forced to shutdown: %w", err)
	}

	log.Println("Server exited")
	return nil
}

// Health check handler
func healthHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`{"status":"healthy","service":"{{.ProjectName}}"}`))
}

{{if .WithMetrics}}
func startMetricsServer() {
	metricsAddr := fmt.Sprintf(":%d", config.MetricsPort)
	log.Printf("Metrics server starting on %s", metricsAddr)

	mux := http.NewServeMux()
	mux.HandleFunc("/metrics", metricsHandler)

	if err := http.ListenAndServe(metricsAddr, mux); err != nil {
		log.Printf("Metrics server error: %v", err)
	}
}

func metricsHandler(w http.ResponseWriter, r *http.Request) {
	// Implement Prometheus metrics here
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("# Metrics would go here\n"))
}
{{end}}

{{if .WithVersion}}
var versionCmd = &cobra.Command{
	Use:   "version",
	Short: "Print the version number",
	Long:  `Print the version number of {{.ProjectName}}`,
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("{{.ProjectName}} v1.0.0")
	},
}
{{end}}
