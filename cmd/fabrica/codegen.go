// Copyright ¬© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT

package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/spf13/cobra"
)

func newCodegenCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "codegen",
		Short: "Code generation utilities",
		Long: `Code generation utilities for managing resource registration.

The codegen command helps prepare your project for code generation by
creating registration files that import and register all discovered resources.`,
	}

	cmd.AddCommand(newCodegenInitCommand())
	return cmd
}

func newCodegenInitCommand() *cobra.Command {
	return &cobra.Command{
		Use:   "init",
		Short: "Initialize code generation (creates resource registration file)",
		Long: `Initialize code generation by creating a registration file.

This command scans pkg/resources/ for resource definitions and generates
a register_generated.go file that imports and registers all discovered resources.

Run this command:
  - After adding new resources with 'fabrica add resource'
  - Before running 'fabrica generate'
  - Whenever you want to refresh the resource registration

Example:
  fabrica codegen init
  fabrica generate
`,
		RunE: func(_ *cobra.Command, _ []string) error {
			return generateRegistrationFile()
		},
	}
}

func generateRegistrationFile() error {
	fmt.Println("üîç Discovering resources...")

	// 1. Read go.mod to get module path
	modulePath, err := getModulePath()
	if err != nil {
		return fmt.Errorf("failed to get module path: %w (make sure you're in a Go module)", err)
	}

	// 2. Discover resources
	resources, err := discoverResources()
	if err != nil {
		return fmt.Errorf("failed to discover resources: %w", err)
	}

	if len(resources) == 0 {
		fmt.Println("‚ö†Ô∏è  No resources found in pkg/resources/")
		fmt.Println("   Run 'fabrica add resource <name>' to create a resource first")
		return nil
	}

	fmt.Printf("üì¶ Found %d resource(s): %s\n", len(resources), strings.Join(resources, ", "))

	// 3. Generate registration file
	content := generateRegistrationCode(modulePath, resources)

	// 4. Ensure pkg/resources directory exists
	resourcesDir := filepath.Join("pkg", "resources")
	if err := os.MkdirAll(resourcesDir, 0755); err != nil {
		return fmt.Errorf("failed to create resources directory: %w", err)
	}

	// 5. Write to pkg/resources/register_generated.go
	outputPath := filepath.Join(resourcesDir, "register_generated.go")
	if err := os.WriteFile(outputPath, []byte(content), 0644); err != nil {
		return fmt.Errorf("failed to write registration file: %w", err)
	}

	fmt.Println()
	fmt.Printf("‚úÖ Generated %s\n", outputPath)
	fmt.Println()
	fmt.Println("Next steps:")
	fmt.Println("  fabrica generate                # Generate handlers and storage")
	fmt.Println("  go run cmd/server/main.go       # Start the server")

	return nil
}

func generateRegistrationCode(modulePath string, resources []string) string {
	var imports strings.Builder
	var registrations strings.Builder

	for _, resource := range resources {
		pkg := strings.ToLower(resource)
		imports.WriteString(fmt.Sprintf("\t\"%s/pkg/resources/%s\"\n", modulePath, pkg))
		registrations.WriteString(fmt.Sprintf("\tif err := gen.RegisterResource(&%s.%s{}); err != nil {\n", pkg, resource))
		registrations.WriteString(fmt.Sprintf("\t\treturn fmt.Errorf(\"failed to register %s: %%w\", err)\n", resource))
		registrations.WriteString("\t}\n")
	}

	return fmt.Sprintf(`// Code generated by fabrica codegen init. DO NOT EDIT.
package resources

import (
	"fmt"

	"github.com/alexlovelltroy/fabrica/pkg/codegen"
%s)

// RegisterAllResources registers all discovered resources with the generator.
// This file is auto-generated. Re-run 'fabrica codegen init' after adding resources.
func RegisterAllResources(gen *codegen.Generator) error {
%s
	return nil
}
`, imports.String(), registrations.String())
}
