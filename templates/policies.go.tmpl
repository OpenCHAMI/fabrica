// Code generated by codegen. DO NOT EDIT.
//
// This file provides authorization policy integration for generated handlers.
// Generated from: pkg/codegen/templates/policies.go.tmpl
//
// To modify authorization behavior:
//   1. Edit the template file: pkg/codegen/templates/policies.go.tmpl
//   2. Run 'make dev' to regenerate
//   3. Do NOT edit this file directly - changes will be lost
//
// Authorization system:
//   - Uses PolicyRegistry to manage resource-specific policies
//   - Integrates with tokensmith middleware for auth context
//   - Provides decision-based authorization (Allow/Deny with reasons)
//
// To implement custom policies:
//   1. Create policy implementation in pkg/policies/
//   2. Implement the ResourcePolicy interface:
//      - CanList, CanGet, CanCreate, CanUpdate, CanDelete
//   3. Register policy in main.go:
//      policyRegistry.RegisterPolicy("ResourceName", yourPolicy)
//
// To change auth context extraction:
//   1. Modify GetAuthFromContext to match your middleware
//   2. Update context key to match your tokensmith configuration
//
// To add role-based access:
//   1. Extend AuthContext in pkg/policies/types.go
//   2. Update policy decision logic to check roles
//   3. Implement role checks in your ResourcePolicy
//
package main

import (
	"context"
	
	"{{.ModulePath}}/pkg/policies"
)

// Global policy registry - should be initialized in main.go
var policyRegistry *policies.PolicyRegistry

// GetAuthFromContext extracts auth context from the request context
// This should match your tokensmith middleware's context key
func GetAuthFromContext(ctx context.Context) (*policies.AuthContext, bool) {
	// Adjust this to match your tokensmith middleware's context key
	auth, ok := ctx.Value("auth").(*policies.AuthContext)
	return auth, ok
}