// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openchami/fru-service/internal/storage/ent/resource"
)

// Resource is the model entity for the Resource schema.
type Resource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Unique identifier (e.g., dev-1a2b3c4d)
	UID string `json:"uid,omitempty"`
	// Human-readable name
	Name string `json:"name,omitempty"`
	// API version (e.g., v1, v2beta1)
	APIVersion string `json:"api_version,omitempty"`
	// Resource kind (e.g., Device, Node)
	Kind string `json:"kind,omitempty"`
	// Resource type for indexing
	ResourceType string `json:"resource_type,omitempty"`
	// Desired state of the resource
	Spec json.RawMessage `json:"spec,omitempty"`
	// Observed state of the resource
	Status json.RawMessage `json:"status,omitempty"`
	// Resource creation timestamp
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Resource version for ETags and optimistic locking
	ResourceVersion string `json:"resource_version,omitempty"`
	// Namespace for multi-tenancy
	Namespace string `json:"namespace,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceQuery when eager-loading is set.
	Edges        ResourceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResourceEdges holds the relations/edges for other nodes in the graph.
type ResourceEdges struct {
	// Labels for selection and grouping
	Labels []*Label `json:"labels,omitempty"`
	// Annotations for arbitrary metadata
	Annotations []*Annotation `json:"annotations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LabelsOrErr returns the Labels value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) LabelsOrErr() ([]*Label, error) {
	if e.loadedTypes[0] {
		return e.Labels, nil
	}
	return nil, &NotLoadedError{edge: "labels"}
}

// AnnotationsOrErr returns the Annotations value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) AnnotationsOrErr() ([]*Annotation, error) {
	if e.loadedTypes[1] {
		return e.Annotations, nil
	}
	return nil, &NotLoadedError{edge: "annotations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resource.FieldSpec, resource.FieldStatus:
			values[i] = new([]byte)
		case resource.FieldID:
			values[i] = new(sql.NullInt64)
		case resource.FieldUID, resource.FieldName, resource.FieldAPIVersion, resource.FieldKind, resource.FieldResourceType, resource.FieldResourceVersion, resource.FieldNamespace:
			values[i] = new(sql.NullString)
		case resource.FieldCreatedAt, resource.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resource fields.
func (_m *Resource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case resource.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				_m.UID = value.String
			}
		case resource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case resource.FieldAPIVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_version", values[i])
			} else if value.Valid {
				_m.APIVersion = value.String
			}
		case resource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				_m.Kind = value.String
			}
		case resource.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				_m.ResourceType = value.String
			}
		case resource.FieldSpec:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field spec", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Spec); err != nil {
					return fmt.Errorf("unmarshal field spec: %w", err)
				}
			}
		case resource.FieldStatus:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Status); err != nil {
					return fmt.Errorf("unmarshal field status: %w", err)
				}
			}
		case resource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case resource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case resource.FieldResourceVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_version", values[i])
			} else if value.Valid {
				_m.ResourceVersion = value.String
			}
		case resource.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				_m.Namespace = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Resource.
// This includes values selected through modifiers, order, etc.
func (_m *Resource) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryLabels queries the "labels" edge of the Resource entity.
func (_m *Resource) QueryLabels() *LabelQuery {
	return NewResourceClient(_m.config).QueryLabels(_m)
}

// QueryAnnotations queries the "annotations" edge of the Resource entity.
func (_m *Resource) QueryAnnotations() *AnnotationQuery {
	return NewResourceClient(_m.config).QueryAnnotations(_m)
}

// Update returns a builder for updating this Resource.
// Note that you need to call Resource.Unwrap() before calling this method if this Resource
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Resource) Update() *ResourceUpdateOne {
	return NewResourceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Resource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Resource) Unwrap() *Resource {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Resource is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Resource) String() string {
	var builder strings.Builder
	builder.WriteString("Resource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("uid=")
	builder.WriteString(_m.UID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("api_version=")
	builder.WriteString(_m.APIVersion)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(_m.Kind)
	builder.WriteString(", ")
	builder.WriteString("resource_type=")
	builder.WriteString(_m.ResourceType)
	builder.WriteString(", ")
	builder.WriteString("spec=")
	builder.WriteString(fmt.Sprintf("%v", _m.Spec))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("resource_version=")
	builder.WriteString(_m.ResourceVersion)
	builder.WriteString(", ")
	builder.WriteString("namespace=")
	builder.WriteString(_m.Namespace)
	builder.WriteByte(')')
	return builder.String()
}

// Resources is a parsable slice of Resource.
type Resources []*Resource
