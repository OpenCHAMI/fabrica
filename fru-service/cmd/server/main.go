// Code generated by Fabrica. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT

package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"

	// TODO: Uncomment after running 'fabrica generate'
	// "github.com/openchami/fru-service/internal/storage"
	"github.com/openchami/fru-service/pkg/auth"
	
	// TODO: Uncomment after running 'fabrica generate --storage'
	// "github.com/openchami/fru-service/internal/storage/ent"
	// "github.com/openchami/fru-service/internal/storage/ent/migrate"
	
	_ "github.com/mattn/go-sqlite3"
	
	
)

// Config holds all configuration for the service
type Config struct {
	// Server Configuration
	Port         int    `mapstructure:"port"`
	Host         string `mapstructure:"host"`
	ReadTimeout  int    `mapstructure:"read_timeout"`
	WriteTimeout int    `mapstructure:"write_timeout"`
	IdleTimeout  int    `mapstructure:"idle_timeout"`

	
	// Storage Configuration
	
	DatabaseURL string `mapstructure:"database_url"`
	
	

	
	// Authentication Configuration
	Auth auth.Config `mapstructure:"auth"`
	

	

	// Feature Flags
	
	
	Debug bool `mapstructure:"debug"`
}

// DefaultConfig returns the default configuration
func DefaultConfig() *Config {
	return &Config{
		Port:         8080,
		Host:         "0.0.0.0",
		ReadTimeout:  15,
		WriteTimeout: 15,
		IdleTimeout:  60,
		
		
		DatabaseURL:  "file:./data.db?cache=shared&_fk=1",
		
		
		
		Auth: auth.DefaultConfig(),
		
		
		Debug: false,
	}
}

var (
	cfgFile string
	config  *Config
)

func main() {
	if err := rootCmd.Execute(); err != nil {
		log.Fatal(err)
	}
}

var rootCmd = &cobra.Command{
	Use:   "fru-service",
	Short: "",
	Long:  `fru-service - A Fabrica-generated OpenCHAMI service`,
	RunE:  runServer,
}

var serveCmd = &cobra.Command{
	Use:   "serve",
	Short: "Start the fru-service server",
	Long:  `Start the fru-service HTTP server with the configured options`,
	RunE:  runServer,
}

func init() {
	cobra.OnInitialize(initConfig)

	// Global flags
	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.fru-service.yaml)")
	rootCmd.PersistentFlags().Bool("debug", false, "Enable debug logging")

	// Server flags
	serveCmd.Flags().IntP("port", "p", 8080, "Port to listen on")
	serveCmd.Flags().String("host", "0.0.0.0", "Host to bind to")
	serveCmd.Flags().Int("read-timeout", 15, "Read timeout in seconds")
	serveCmd.Flags().Int("write-timeout", 15, "Write timeout in seconds")
	serveCmd.Flags().Int("idle-timeout", 60, "Idle timeout in seconds")

	
	
	serveCmd.Flags().String("database-url", "", "Database connection URL")
	
	

	
	// Authentication flags
	serveCmd.Flags().Bool("auth-enabled", true, "Enable authentication")
	serveCmd.Flags().Bool("auth-non-enforcing", false, "Non-enforcing auth mode (logs only)")
	serveCmd.Flags().String("jwt-public-key", "", "JWT public key for static validation")
	serveCmd.Flags().String("jwks-url", "", "JWKS URL for dynamic key validation")
	serveCmd.Flags().String("jwt-issuer", "", "Expected JWT issuer")
	serveCmd.Flags().String("jwt-audience", "", "Expected JWT audience")
	

	

	

	

	// Bind flags to viper
	viper.BindPFlags(serveCmd.Flags())
	viper.BindPFlags(rootCmd.PersistentFlags())

	// Add subcommands
	rootCmd.AddCommand(serveCmd)
	
	rootCmd.AddCommand(versionCmd)
	
}

func initConfig() {
	config = DefaultConfig()

	if cfgFile != "" {
		viper.SetConfigFile(cfgFile)
	} else {
		// Search for config in home directory
		home, err := os.UserHomeDir()
		cobra.CheckErr(err)

		viper.AddConfigPath(home)
		viper.AddConfigPath(".")
		viper.SetConfigType("yaml")
		viper.SetConfigName(".fru-service")
	}

	// Environment variables
	viper.SetEnvPrefix("FRU-SERVICE")
	viper.AutomaticEnv()

	// Read config file if it exists
	if err := viper.ReadInConfig(); err == nil {
		log.Printf("Using config file: %s", viper.ConfigFileUsed())
	}

	// Unmarshal config
	if err := viper.Unmarshal(config); err != nil {
		log.Fatalf("Unable to decode into config struct: %v", err)
	}

	// Set debug logging
	if config.Debug {
		log.SetFlags(log.LstdFlags | log.Lshortfile)
		log.Println("Debug logging enabled")
	}
}

func runServer(cmd *cobra.Command, args []string) error {
	log.Printf("Starting fru-service server...")

	
	// Initialize storage backend
	
	// TODO: Connect to database after running 'fabrica generate --storage'
	// client, err := ent.Open("sqlite", config.DatabaseURL)
	// if err != nil {
	// 	return fmt.Errorf("failed opening connection to sqlite: %w", err)
	// }
	// defer client.Close()

	// Run auto-migration
	// ctx := context.Background()
	// if err := client.Schema.Create(
	// 	ctx,
	// 	migrate.WithDropIndex(true),
	// 	migrate.WithDropColumn(true),
	// ); err != nil {
	// 	return fmt.Errorf("failed creating schema resources: %w", err)
	// }
	// log.Println("Database schema migrated successfully")

	// Set Ent client for storage operations
	// TODO: Uncomment after running 'fabrica generate --storage'
	// storage.SetEntClient(client)
	log.Println("Ent client configuration not yet generated - run 'fabrica generate --storage'")
	
	

	// Setup router
	r := chi.NewRouter()

	// Add middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.RequestID)
	r.Use(middleware.RealIP)

	if config.Debug {
		r.Mount("/debug", middleware.Profiler())
	}

	
	// Setup authentication middleware
	if config.Auth.Enabled {
		authLogger := log.New(os.Stdout, "auth: ", log.LstdFlags)
		authMiddleware := config.Auth.CreateMiddleware(authLogger)
		
		// Apply auth to protected routes
		r.Route("/api", func(r chi.Router) {
			r.Use(authMiddleware)
			// Protected API routes will be registered here
			// TODO: RegisterGeneratedRoutes(r) - Run 'fabrica generate' to create routes
		})

		// Public routes (health checks, etc.)
		r.Route("/public", func(r chi.Router) {
			r.Get("/health", healthHandler)
			
		})
	} else {
		log.Println("Authentication disabled")
		// TODO: RegisterGeneratedRoutes(r) - Run 'fabrica generate' to create routes
		r.Get("/health", healthHandler)
	}
	

	

	

	// Create HTTP server
	addr := fmt.Sprintf("%s:%d", config.Host, config.Port)
	server := &http.Server{
		Addr:         addr,
		Handler:      r,
		ReadTimeout:  time.Duration(config.ReadTimeout) * time.Second,
		WriteTimeout: time.Duration(config.WriteTimeout) * time.Second,
		IdleTimeout:  time.Duration(config.IdleTimeout) * time.Second,
	}

	// Start server in goroutine
	go func() {
		log.Printf("Server starting on %s", addr)
		
		
		log.Printf("Storage: sqlite database")
		
		
		
		log.Printf("Authentication: %s", map[bool]string{true: "enabled", false: "disabled"}[config.Auth.Enabled])
		
		
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Server failed: %v", err)
		}
	}()

	// Wait for interrupt signal for graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("Server shutting down...")

	// Graceful shutdown with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		return fmt.Errorf("server forced to shutdown: %w", err)
	}

	log.Println("Server exited")
	return nil
}

// Health check handler
func healthHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`{"status":"healthy","service":"fru-service"}`))
}




var versionCmd = &cobra.Command{
	Use:   "version",
	Short: "Print the version number",
	Long:  `Print the version number of fru-service`,
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("fru-service v1.0.0")
	},
}
