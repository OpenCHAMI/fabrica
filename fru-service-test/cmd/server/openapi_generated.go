// Code generated by codegen. DO NOT EDIT.
// Copyright Â© 2025 OpenCHAMI a Series of LF Projects, LLC
//
// SPDX-License-Identifier: MIT
//
// This file contains OpenAPI 3.0 specification generation for all resources.
// Generated from: pkg/codegen/templates/openapi.go.tmpl
//
// To modify OpenAPI spec:
//  1. Edit the template file: pkg/codegen/templates/openapi.go.tmpl
//  2. Run 'make dev' to regenerate
//  3. Do NOT edit this file directly - changes will be lost
//
// OpenAPI endpoints:
//   - GET /openapi.json - Returns OpenAPI 3.0 spec
//   - GET /docs - Returns Swagger UI
//
// This file automatically generates OpenAPI schemas from Go types using
// kin-openapi's openapi3gen package. No docstring annotations required.
package main

import (
	"encoding/json"
	"net/http"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/getkin/kin-openapi/openapi3gen"
	"github.com/user/fru-service-test/pkg/resources/fru"
)

// ServeOpenAPISpec returns the OpenAPI 3.0 specification
func ServeOpenAPISpec(w http.ResponseWriter, r *http.Request) {
	spec := GenerateOpenAPISpec()
	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(spec); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

// ServeSwaggerUI returns the Swagger UI HTML page
func ServeSwaggerUI(w http.ResponseWriter, r *http.Request) {
	html := `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>OpenCHAMI Inventory API Documentation</title>
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css">
    <style>
        html { box-sizing: border-box; overflow: -moz-scrollbars-vertical; overflow-y: scroll; }
        *, *:before, *:after { box-sizing: inherit; }
        body { margin:0; padding:0; }
    </style>
</head>
<body>
    <div id="swagger-ui"></div>
    <script src="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js"></script>
    <script src="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-standalone-preset.js"></script>
    <script>
        window.onload = function() {
            window.ui = SwaggerUIBundle({
                url: "/openapi.json",
                dom_id: '#swagger-ui',
                deepLinking: true,
                presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIStandalonePreset
                ],
                plugins: [
                    SwaggerUIBundle.plugins.DownloadUrl
                ],
                layout: "StandaloneLayout"
            });
        };
    </script>
</body>
</html>`
	w.Header().Set("Content-Type", "text/html")
	w.Write([]byte(html))
}

// GenerateOpenAPISpec generates the complete OpenAPI 3.0 specification
func GenerateOpenAPISpec() *openapi3.T {
	spec := &openapi3.T{
		OpenAPI: "3.0.0",
		Info: &openapi3.Info{
			Title:       "OpenCHAMI Inventory API",
			Description: "HPC hardware inventory management system with Kubernetes-style resource management",
			Version:     "1.0.0",
			Contact: &openapi3.Contact{
				Name: "OpenCHAMI Project",
				URL:  "https://github.com/alexlovelltroy/inventory",
			},
		},
		Servers: openapi3.Servers{
			{
				URL:         "http://localhost:3333",
				Description: "Development server",
			},
		},
		Paths: openapi3.NewPaths(),
		Components: &openapi3.Components{
			Schemas: make(openapi3.Schemas),
		},
	}

	// Register all resource paths
	registerFRUPaths(spec)

	return spec
}

// registerFRUPaths registers OpenAPI paths for FRU resources
func registerFRUPaths(spec *openapi3.T) {
	// Generate schemas from Go types - NO ANNOTATIONS NEEDED
	resourceSchema, _ := openapi3gen.NewSchemaRefForValue(&fru.FRU{}, spec.Components.Schemas)
	spec.Components.Schemas["FRU"] = resourceSchema

	createReqSchema, _ := openapi3gen.NewSchemaRefForValue(&CreateFRURequest{}, spec.Components.Schemas)
	spec.Components.Schemas["CreateFRURequest"] = createReqSchema

	updateReqSchema, _ := openapi3gen.NewSchemaRefForValue(&UpdateFRURequest{}, spec.Components.Schemas)
	spec.Components.Schemas["UpdateFRURequest"] = updateReqSchema

	// Error response schema
	if _, exists := spec.Components.Schemas["ErrorResponse"]; !exists {
		errorSchema := openapi3.NewObjectSchema().
			WithProperty("error", openapi3.NewStringSchema()).
			WithRequired([]string{"error"})
		spec.Components.Schemas["ErrorResponse"] = &openapi3.SchemaRef{Value: errorSchema}
	}

	// DELETE response schema
	if _, exists := spec.Components.Schemas["DeleteResponse"]; !exists {
		deleteSchema, _ := openapi3gen.NewSchemaRefForValue(&DeleteResponse{}, spec.Components.Schemas)
		spec.Components.Schemas["DeleteResponse"] = deleteSchema
	}

	// List FRUs operation
	listOp := openapi3.NewOperation()
	listOp.OperationID = "listFRUs"
	listOp.Summary = "List all FRU resources"
	listOp.Description = "Returns a list of all FRU resources in the inventory"
	listOp.Tags = []string{"FRU"}
	listOp.Responses = openapi3.NewResponses()
	arraySchema := openapi3.NewArraySchema()
	arraySchema.Items = &openapi3.SchemaRef{Ref: "#/components/schemas/FRU"}
	listOp.Responses.Set("200", &openapi3.ResponseRef{
		Value: openapi3.NewResponse().
			WithDescription("Successful response").
			WithJSONSchemaRef(&openapi3.SchemaRef{Value: arraySchema}),
	})
	listOp.Responses.Set("500", errorResponse())

	// Create FRU operation
	createOp := openapi3.NewOperation()
	createOp.OperationID = "createFRU"
	createOp.Summary = "Create a new FRU resource"
	createOp.Description = "Creates a new FRU resource with the provided specification"
	createOp.Tags = []string{"FRU"}
	createOp.RequestBody = &openapi3.RequestBodyRef{
		Value: openapi3.NewRequestBody().
			WithRequired(true).
			WithJSONSchemaRef(&openapi3.SchemaRef{
				Ref: "#/components/schemas/CreateFRURequest",
			}),
	}
	createOp.Responses = openapi3.NewResponses()
	createOp.Responses.Set("201", &openapi3.ResponseRef{
		Value: openapi3.NewResponse().
			WithDescription("Resource created successfully").
			WithJSONSchemaRef(&openapi3.SchemaRef{
				Ref: "#/components/schemas/FRU",
			}),
	})
	createOp.Responses.Set("400", errorResponse())
	createOp.Responses.Set("500", errorResponse())

	// Get FRU operation
	getOp := openapi3.NewOperation()
	getOp.OperationID = "getFRU"
	getOp.Summary = "Get a specific FRU resource"
	getOp.Description = "Returns details of a specific FRU resource by UID"
	getOp.Tags = []string{"FRU"}
	getOp.Responses = openapi3.NewResponses()
	getOp.Responses.Set("200", &openapi3.ResponseRef{
		Value: openapi3.NewResponse().
			WithDescription("Successful response").
			WithJSONSchemaRef(&openapi3.SchemaRef{
				Ref: "#/components/schemas/FRU",
			}),
	})
	getOp.Responses.Set("404", errorResponse())
	getOp.Responses.Set("500", errorResponse())

	// Update FRU operation
	updateOp := openapi3.NewOperation()
	updateOp.OperationID = "updateFRU"
	updateOp.Summary = "Update a FRU resource"
	updateOp.Description = "Updates an existing FRU resource with new values"
	updateOp.Tags = []string{"FRU"}
	updateOp.RequestBody = &openapi3.RequestBodyRef{
		Value: openapi3.NewRequestBody().
			WithRequired(true).
			WithJSONSchemaRef(&openapi3.SchemaRef{
				Ref: "#/components/schemas/UpdateFRURequest",
			}),
	}
	updateOp.Responses = openapi3.NewResponses()
	updateOp.Responses.Set("200", &openapi3.ResponseRef{
		Value: openapi3.NewResponse().
			WithDescription("Resource updated successfully").
			WithJSONSchemaRef(&openapi3.SchemaRef{
				Ref: "#/components/schemas/FRU",
			}),
	})
	updateOp.Responses.Set("400", errorResponse())
	updateOp.Responses.Set("404", errorResponse())
	updateOp.Responses.Set("500", errorResponse())

	// Delete FRU operation
	deleteOp := openapi3.NewOperation()
	deleteOp.OperationID = "deleteFRU"
	deleteOp.Summary = "Delete a FRU resource"
	deleteOp.Description = "Removes a FRU resource from the inventory"
	deleteOp.Tags = []string{"FRU"}
	deleteOp.Responses = openapi3.NewResponses()
	deleteOp.Responses.Set("200", &openapi3.ResponseRef{
		Value: openapi3.NewResponse().
			WithDescription("Resource deleted successfully").
			WithJSONSchemaRef(&openapi3.SchemaRef{
				Ref: "#/components/schemas/DeleteResponse",
			}),
	})
	deleteOp.Responses.Set("400", errorResponse())
	deleteOp.Responses.Set("404", errorResponse())
	deleteOp.Responses.Set("500", errorResponse())

	// Create path items
	collectionPath := &openapi3.PathItem{
		Get:  listOp,
		Post: createOp,
	}

	uidParam := openapi3.NewPathParameter("uid").
		WithDescription("Unique identifier of the FRU resource").
		WithRequired(true).
		WithSchema(openapi3.NewStringSchema())

	itemPath := &openapi3.PathItem{
		Get:    getOp,
		Put:    updateOp,
		Delete: deleteOp,
		Parameters: []*openapi3.ParameterRef{
			{Value: uidParam},
		},
	}

	// Add paths to spec
	spec.Paths.Set("/frus", collectionPath)
	spec.Paths.Set("/frus/{uid}", itemPath)
}

// Helper function for error responses
func errorResponse() *openapi3.ResponseRef {
	return &openapi3.ResponseRef{
		Value: openapi3.NewResponse().
			WithDescription("Error response").
			WithJSONSchemaRef(&openapi3.SchemaRef{
				Ref: "#/components/schemas/ErrorResponse",
			}),
	}
}
