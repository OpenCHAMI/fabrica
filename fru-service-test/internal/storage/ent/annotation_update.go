// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/user/fru-service-test/internal/storage/ent/annotation"
	"github.com/user/fru-service-test/internal/storage/ent/predicate"
	"github.com/user/fru-service-test/internal/storage/ent/resource"
)

// AnnotationUpdate is the builder for updating Annotation entities.
type AnnotationUpdate struct {
	config
	hooks    []Hook
	mutation *AnnotationMutation
}

// Where appends a list predicates to the AnnotationUpdate builder.
func (au *AnnotationUpdate) Where(ps ...predicate.Annotation) *AnnotationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetKey sets the "key" field.
func (au *AnnotationUpdate) SetKey(s string) *AnnotationUpdate {
	au.mutation.SetKey(s)
	return au
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (au *AnnotationUpdate) SetNillableKey(s *string) *AnnotationUpdate {
	if s != nil {
		au.SetKey(*s)
	}
	return au
}

// SetValue sets the "value" field.
func (au *AnnotationUpdate) SetValue(s string) *AnnotationUpdate {
	au.mutation.SetValue(s)
	return au
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (au *AnnotationUpdate) SetNillableValue(s *string) *AnnotationUpdate {
	if s != nil {
		au.SetValue(*s)
	}
	return au
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (au *AnnotationUpdate) SetResourceID(id int) *AnnotationUpdate {
	au.mutation.SetResourceID(id)
	return au
}

// SetResource sets the "resource" edge to the Resource entity.
func (au *AnnotationUpdate) SetResource(r *Resource) *AnnotationUpdate {
	return au.SetResourceID(r.ID)
}

// Mutation returns the AnnotationMutation object of the builder.
func (au *AnnotationUpdate) Mutation() *AnnotationMutation {
	return au.mutation
}

// ClearResource clears the "resource" edge to the Resource entity.
func (au *AnnotationUpdate) ClearResource() *AnnotationUpdate {
	au.mutation.ClearResource()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnnotationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnnotationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnnotationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnnotationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AnnotationUpdate) check() error {
	if v, ok := au.mutation.Key(); ok {
		if err := annotation.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Annotation.key": %w`, err)}
		}
	}
	if au.mutation.ResourceCleared() && len(au.mutation.ResourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Annotation.resource"`)
	}
	return nil
}

func (au *AnnotationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(annotation.Table, annotation.Columns, sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Key(); ok {
		_spec.SetField(annotation.FieldKey, field.TypeString, value)
	}
	if value, ok := au.mutation.Value(); ok {
		_spec.SetField(annotation.FieldValue, field.TypeString, value)
	}
	if au.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.ResourceTable,
			Columns: []string{annotation.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.ResourceTable,
			Columns: []string{annotation.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{annotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AnnotationUpdateOne is the builder for updating a single Annotation entity.
type AnnotationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnnotationMutation
}

// SetKey sets the "key" field.
func (auo *AnnotationUpdateOne) SetKey(s string) *AnnotationUpdateOne {
	auo.mutation.SetKey(s)
	return auo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (auo *AnnotationUpdateOne) SetNillableKey(s *string) *AnnotationUpdateOne {
	if s != nil {
		auo.SetKey(*s)
	}
	return auo
}

// SetValue sets the "value" field.
func (auo *AnnotationUpdateOne) SetValue(s string) *AnnotationUpdateOne {
	auo.mutation.SetValue(s)
	return auo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (auo *AnnotationUpdateOne) SetNillableValue(s *string) *AnnotationUpdateOne {
	if s != nil {
		auo.SetValue(*s)
	}
	return auo
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (auo *AnnotationUpdateOne) SetResourceID(id int) *AnnotationUpdateOne {
	auo.mutation.SetResourceID(id)
	return auo
}

// SetResource sets the "resource" edge to the Resource entity.
func (auo *AnnotationUpdateOne) SetResource(r *Resource) *AnnotationUpdateOne {
	return auo.SetResourceID(r.ID)
}

// Mutation returns the AnnotationMutation object of the builder.
func (auo *AnnotationUpdateOne) Mutation() *AnnotationMutation {
	return auo.mutation
}

// ClearResource clears the "resource" edge to the Resource entity.
func (auo *AnnotationUpdateOne) ClearResource() *AnnotationUpdateOne {
	auo.mutation.ClearResource()
	return auo
}

// Where appends a list predicates to the AnnotationUpdate builder.
func (auo *AnnotationUpdateOne) Where(ps ...predicate.Annotation) *AnnotationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnnotationUpdateOne) Select(field string, fields ...string) *AnnotationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Annotation entity.
func (auo *AnnotationUpdateOne) Save(ctx context.Context) (*Annotation, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnnotationUpdateOne) SaveX(ctx context.Context) *Annotation {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnnotationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnnotationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AnnotationUpdateOne) check() error {
	if v, ok := auo.mutation.Key(); ok {
		if err := annotation.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Annotation.key": %w`, err)}
		}
	}
	if auo.mutation.ResourceCleared() && len(auo.mutation.ResourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Annotation.resource"`)
	}
	return nil
}

func (auo *AnnotationUpdateOne) sqlSave(ctx context.Context) (_node *Annotation, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(annotation.Table, annotation.Columns, sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Annotation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, annotation.FieldID)
		for _, f := range fields {
			if !annotation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != annotation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Key(); ok {
		_spec.SetField(annotation.FieldKey, field.TypeString, value)
	}
	if value, ok := auo.mutation.Value(); ok {
		_spec.SetField(annotation.FieldValue, field.TypeString, value)
	}
	if auo.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.ResourceTable,
			Columns: []string{annotation.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   annotation.ResourceTable,
			Columns: []string{annotation.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Annotation{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{annotation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
