// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/user/fru-service-test/internal/storage/ent/annotation"
	"github.com/user/fru-service-test/internal/storage/ent/label"
	"github.com/user/fru-service-test/internal/storage/ent/predicate"
	"github.com/user/fru-service-test/internal/storage/ent/resource"
)

// ResourceUpdate is the builder for updating Resource entities.
type ResourceUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceMutation
}

// Where appends a list predicates to the ResourceUpdate builder.
func (ru *ResourceUpdate) Where(ps ...predicate.Resource) *ResourceUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *ResourceUpdate) SetName(s string) *ResourceUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableName(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetAPIVersion sets the "api_version" field.
func (ru *ResourceUpdate) SetAPIVersion(s string) *ResourceUpdate {
	ru.mutation.SetAPIVersion(s)
	return ru
}

// SetNillableAPIVersion sets the "api_version" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableAPIVersion(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetAPIVersion(*s)
	}
	return ru
}

// SetKind sets the "kind" field.
func (ru *ResourceUpdate) SetKind(s string) *ResourceUpdate {
	ru.mutation.SetKind(s)
	return ru
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableKind(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetKind(*s)
	}
	return ru
}

// SetResourceType sets the "resource_type" field.
func (ru *ResourceUpdate) SetResourceType(s string) *ResourceUpdate {
	ru.mutation.SetResourceType(s)
	return ru
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableResourceType(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetResourceType(*s)
	}
	return ru
}

// SetSpec sets the "spec" field.
func (ru *ResourceUpdate) SetSpec(jm json.RawMessage) *ResourceUpdate {
	ru.mutation.SetSpec(jm)
	return ru
}

// AppendSpec appends jm to the "spec" field.
func (ru *ResourceUpdate) AppendSpec(jm json.RawMessage) *ResourceUpdate {
	ru.mutation.AppendSpec(jm)
	return ru
}

// SetStatus sets the "status" field.
func (ru *ResourceUpdate) SetStatus(jm json.RawMessage) *ResourceUpdate {
	ru.mutation.SetStatus(jm)
	return ru
}

// AppendStatus appends jm to the "status" field.
func (ru *ResourceUpdate) AppendStatus(jm json.RawMessage) *ResourceUpdate {
	ru.mutation.AppendStatus(jm)
	return ru
}

// ClearStatus clears the value of the "status" field.
func (ru *ResourceUpdate) ClearStatus() *ResourceUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ResourceUpdate) SetUpdatedAt(t time.Time) *ResourceUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetResourceVersion sets the "resource_version" field.
func (ru *ResourceUpdate) SetResourceVersion(s string) *ResourceUpdate {
	ru.mutation.SetResourceVersion(s)
	return ru
}

// SetNillableResourceVersion sets the "resource_version" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableResourceVersion(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetResourceVersion(*s)
	}
	return ru
}

// SetNamespace sets the "namespace" field.
func (ru *ResourceUpdate) SetNamespace(s string) *ResourceUpdate {
	ru.mutation.SetNamespace(s)
	return ru
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (ru *ResourceUpdate) SetNillableNamespace(s *string) *ResourceUpdate {
	if s != nil {
		ru.SetNamespace(*s)
	}
	return ru
}

// ClearNamespace clears the value of the "namespace" field.
func (ru *ResourceUpdate) ClearNamespace() *ResourceUpdate {
	ru.mutation.ClearNamespace()
	return ru
}

// AddLabelIDs adds the "labels" edge to the Label entity by IDs.
func (ru *ResourceUpdate) AddLabelIDs(ids ...int) *ResourceUpdate {
	ru.mutation.AddLabelIDs(ids...)
	return ru
}

// AddLabels adds the "labels" edges to the Label entity.
func (ru *ResourceUpdate) AddLabels(l ...*Label) *ResourceUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ru.AddLabelIDs(ids...)
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (ru *ResourceUpdate) AddAnnotationIDs(ids ...int) *ResourceUpdate {
	ru.mutation.AddAnnotationIDs(ids...)
	return ru
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (ru *ResourceUpdate) AddAnnotations(a ...*Annotation) *ResourceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddAnnotationIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (ru *ResourceUpdate) Mutation() *ResourceMutation {
	return ru.mutation
}

// ClearLabels clears all "labels" edges to the Label entity.
func (ru *ResourceUpdate) ClearLabels() *ResourceUpdate {
	ru.mutation.ClearLabels()
	return ru
}

// RemoveLabelIDs removes the "labels" edge to Label entities by IDs.
func (ru *ResourceUpdate) RemoveLabelIDs(ids ...int) *ResourceUpdate {
	ru.mutation.RemoveLabelIDs(ids...)
	return ru
}

// RemoveLabels removes "labels" edges to Label entities.
func (ru *ResourceUpdate) RemoveLabels(l ...*Label) *ResourceUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ru.RemoveLabelIDs(ids...)
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (ru *ResourceUpdate) ClearAnnotations() *ResourceUpdate {
	ru.mutation.ClearAnnotations()
	return ru
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (ru *ResourceUpdate) RemoveAnnotationIDs(ids ...int) *ResourceUpdate {
	ru.mutation.RemoveAnnotationIDs(ids...)
	return ru
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (ru *ResourceUpdate) RemoveAnnotations(a ...*Annotation) *ResourceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveAnnotationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResourceUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResourceUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResourceUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ResourceUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := resource.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResourceUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := resource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Resource.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Kind(); ok {
		if err := resource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Resource.kind": %w`, err)}
		}
	}
	if v, ok := ru.mutation.ResourceType(); ok {
		if err := resource.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "Resource.resource_type": %w`, err)}
		}
	}
	return nil
}

func (ru *ResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resource.Table, resource.Columns, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(resource.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.APIVersion(); ok {
		_spec.SetField(resource.FieldAPIVersion, field.TypeString, value)
	}
	if value, ok := ru.mutation.Kind(); ok {
		_spec.SetField(resource.FieldKind, field.TypeString, value)
	}
	if value, ok := ru.mutation.ResourceType(); ok {
		_spec.SetField(resource.FieldResourceType, field.TypeString, value)
	}
	if value, ok := ru.mutation.Spec(); ok {
		_spec.SetField(resource.FieldSpec, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedSpec(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, resource.FieldSpec, value)
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(resource.FieldStatus, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedStatus(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, resource.FieldStatus, value)
		})
	}
	if ru.mutation.StatusCleared() {
		_spec.ClearField(resource.FieldStatus, field.TypeJSON)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(resource.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.ResourceVersion(); ok {
		_spec.SetField(resource.FieldResourceVersion, field.TypeString, value)
	}
	if value, ok := ru.mutation.Namespace(); ok {
		_spec.SetField(resource.FieldNamespace, field.TypeString, value)
	}
	if ru.mutation.NamespaceCleared() {
		_spec.ClearField(resource.FieldNamespace, field.TypeString)
	}
	if ru.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.LabelsTable,
			Columns: []string{resource.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedLabelsIDs(); len(nodes) > 0 && !ru.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.LabelsTable,
			Columns: []string{resource.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.LabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.LabelsTable,
			Columns: []string{resource.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.AnnotationsTable,
			Columns: []string{resource.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !ru.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.AnnotationsTable,
			Columns: []string{resource.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.AnnotationsTable,
			Columns: []string{resource.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ResourceUpdateOne is the builder for updating a single Resource entity.
type ResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResourceMutation
}

// SetName sets the "name" field.
func (ruo *ResourceUpdateOne) SetName(s string) *ResourceUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableName(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetAPIVersion sets the "api_version" field.
func (ruo *ResourceUpdateOne) SetAPIVersion(s string) *ResourceUpdateOne {
	ruo.mutation.SetAPIVersion(s)
	return ruo
}

// SetNillableAPIVersion sets the "api_version" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableAPIVersion(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetAPIVersion(*s)
	}
	return ruo
}

// SetKind sets the "kind" field.
func (ruo *ResourceUpdateOne) SetKind(s string) *ResourceUpdateOne {
	ruo.mutation.SetKind(s)
	return ruo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableKind(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetKind(*s)
	}
	return ruo
}

// SetResourceType sets the "resource_type" field.
func (ruo *ResourceUpdateOne) SetResourceType(s string) *ResourceUpdateOne {
	ruo.mutation.SetResourceType(s)
	return ruo
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableResourceType(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetResourceType(*s)
	}
	return ruo
}

// SetSpec sets the "spec" field.
func (ruo *ResourceUpdateOne) SetSpec(jm json.RawMessage) *ResourceUpdateOne {
	ruo.mutation.SetSpec(jm)
	return ruo
}

// AppendSpec appends jm to the "spec" field.
func (ruo *ResourceUpdateOne) AppendSpec(jm json.RawMessage) *ResourceUpdateOne {
	ruo.mutation.AppendSpec(jm)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *ResourceUpdateOne) SetStatus(jm json.RawMessage) *ResourceUpdateOne {
	ruo.mutation.SetStatus(jm)
	return ruo
}

// AppendStatus appends jm to the "status" field.
func (ruo *ResourceUpdateOne) AppendStatus(jm json.RawMessage) *ResourceUpdateOne {
	ruo.mutation.AppendStatus(jm)
	return ruo
}

// ClearStatus clears the value of the "status" field.
func (ruo *ResourceUpdateOne) ClearStatus() *ResourceUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ResourceUpdateOne) SetUpdatedAt(t time.Time) *ResourceUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetResourceVersion sets the "resource_version" field.
func (ruo *ResourceUpdateOne) SetResourceVersion(s string) *ResourceUpdateOne {
	ruo.mutation.SetResourceVersion(s)
	return ruo
}

// SetNillableResourceVersion sets the "resource_version" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableResourceVersion(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetResourceVersion(*s)
	}
	return ruo
}

// SetNamespace sets the "namespace" field.
func (ruo *ResourceUpdateOne) SetNamespace(s string) *ResourceUpdateOne {
	ruo.mutation.SetNamespace(s)
	return ruo
}

// SetNillableNamespace sets the "namespace" field if the given value is not nil.
func (ruo *ResourceUpdateOne) SetNillableNamespace(s *string) *ResourceUpdateOne {
	if s != nil {
		ruo.SetNamespace(*s)
	}
	return ruo
}

// ClearNamespace clears the value of the "namespace" field.
func (ruo *ResourceUpdateOne) ClearNamespace() *ResourceUpdateOne {
	ruo.mutation.ClearNamespace()
	return ruo
}

// AddLabelIDs adds the "labels" edge to the Label entity by IDs.
func (ruo *ResourceUpdateOne) AddLabelIDs(ids ...int) *ResourceUpdateOne {
	ruo.mutation.AddLabelIDs(ids...)
	return ruo
}

// AddLabels adds the "labels" edges to the Label entity.
func (ruo *ResourceUpdateOne) AddLabels(l ...*Label) *ResourceUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ruo.AddLabelIDs(ids...)
}

// AddAnnotationIDs adds the "annotations" edge to the Annotation entity by IDs.
func (ruo *ResourceUpdateOne) AddAnnotationIDs(ids ...int) *ResourceUpdateOne {
	ruo.mutation.AddAnnotationIDs(ids...)
	return ruo
}

// AddAnnotations adds the "annotations" edges to the Annotation entity.
func (ruo *ResourceUpdateOne) AddAnnotations(a ...*Annotation) *ResourceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddAnnotationIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (ruo *ResourceUpdateOne) Mutation() *ResourceMutation {
	return ruo.mutation
}

// ClearLabels clears all "labels" edges to the Label entity.
func (ruo *ResourceUpdateOne) ClearLabels() *ResourceUpdateOne {
	ruo.mutation.ClearLabels()
	return ruo
}

// RemoveLabelIDs removes the "labels" edge to Label entities by IDs.
func (ruo *ResourceUpdateOne) RemoveLabelIDs(ids ...int) *ResourceUpdateOne {
	ruo.mutation.RemoveLabelIDs(ids...)
	return ruo
}

// RemoveLabels removes "labels" edges to Label entities.
func (ruo *ResourceUpdateOne) RemoveLabels(l ...*Label) *ResourceUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ruo.RemoveLabelIDs(ids...)
}

// ClearAnnotations clears all "annotations" edges to the Annotation entity.
func (ruo *ResourceUpdateOne) ClearAnnotations() *ResourceUpdateOne {
	ruo.mutation.ClearAnnotations()
	return ruo
}

// RemoveAnnotationIDs removes the "annotations" edge to Annotation entities by IDs.
func (ruo *ResourceUpdateOne) RemoveAnnotationIDs(ids ...int) *ResourceUpdateOne {
	ruo.mutation.RemoveAnnotationIDs(ids...)
	return ruo
}

// RemoveAnnotations removes "annotations" edges to Annotation entities.
func (ruo *ResourceUpdateOne) RemoveAnnotations(a ...*Annotation) *ResourceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveAnnotationIDs(ids...)
}

// Where appends a list predicates to the ResourceUpdate builder.
func (ruo *ResourceUpdateOne) Where(ps ...predicate.Resource) *ResourceUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResourceUpdateOne) Select(field string, fields ...string) *ResourceUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Resource entity.
func (ruo *ResourceUpdateOne) Save(ctx context.Context) (*Resource, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResourceUpdateOne) SaveX(ctx context.Context) *Resource {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResourceUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ResourceUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := resource.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResourceUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := resource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Resource.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Kind(); ok {
		if err := resource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "Resource.kind": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.ResourceType(); ok {
		if err := resource.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "Resource.resource_type": %w`, err)}
		}
	}
	return nil
}

func (ruo *ResourceUpdateOne) sqlSave(ctx context.Context) (_node *Resource, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resource.Table, resource.Columns, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Resource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resource.FieldID)
		for _, f := range fields {
			if !resource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(resource.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.APIVersion(); ok {
		_spec.SetField(resource.FieldAPIVersion, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Kind(); ok {
		_spec.SetField(resource.FieldKind, field.TypeString, value)
	}
	if value, ok := ruo.mutation.ResourceType(); ok {
		_spec.SetField(resource.FieldResourceType, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Spec(); ok {
		_spec.SetField(resource.FieldSpec, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedSpec(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, resource.FieldSpec, value)
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(resource.FieldStatus, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedStatus(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, resource.FieldStatus, value)
		})
	}
	if ruo.mutation.StatusCleared() {
		_spec.ClearField(resource.FieldStatus, field.TypeJSON)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(resource.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.ResourceVersion(); ok {
		_spec.SetField(resource.FieldResourceVersion, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Namespace(); ok {
		_spec.SetField(resource.FieldNamespace, field.TypeString, value)
	}
	if ruo.mutation.NamespaceCleared() {
		_spec.ClearField(resource.FieldNamespace, field.TypeString)
	}
	if ruo.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.LabelsTable,
			Columns: []string{resource.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedLabelsIDs(); len(nodes) > 0 && !ruo.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.LabelsTable,
			Columns: []string{resource.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.LabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.LabelsTable,
			Columns: []string{resource.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.AnnotationsTable,
			Columns: []string{resource.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedAnnotationsIDs(); len(nodes) > 0 && !ruo.mutation.AnnotationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.AnnotationsTable,
			Columns: []string{resource.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AnnotationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resource.AnnotationsTable,
			Columns: []string{resource.AnnotationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(annotation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Resource{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
