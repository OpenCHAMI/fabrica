// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/user/fru-service-test/internal/storage/ent/annotation"
	"github.com/user/fru-service-test/internal/storage/ent/label"
	"github.com/user/fru-service-test/internal/storage/ent/resource"
	"github.com/user/fru-service-test/internal/storage/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	annotationFields := schema.Annotation{}.Fields()
	_ = annotationFields
	// annotationDescKey is the schema descriptor for key field.
	annotationDescKey := annotationFields[0].Descriptor()
	// annotation.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	annotation.KeyValidator = func() func(string) error {
		validators := annotationDescKey.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(key string) error {
			for _, fn := range fns {
				if err := fn(key); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	labelFields := schema.Label{}.Fields()
	_ = labelFields
	// labelDescKey is the schema descriptor for key field.
	labelDescKey := labelFields[0].Descriptor()
	// label.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	label.KeyValidator = func() func(string) error {
		validators := labelDescKey.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(key string) error {
			for _, fn := range fns {
				if err := fn(key); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// labelDescValue is the schema descriptor for value field.
	labelDescValue := labelFields[1].Descriptor()
	// label.ValueValidator is a validator for the "value" field. It is called by the builders before save.
	label.ValueValidator = labelDescValue.Validators[0].(func(string) error)
	resourceFields := schema.Resource{}.Fields()
	_ = resourceFields
	// resourceDescUID is the schema descriptor for uid field.
	resourceDescUID := resourceFields[0].Descriptor()
	// resource.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	resource.UIDValidator = resourceDescUID.Validators[0].(func(string) error)
	// resourceDescName is the schema descriptor for name field.
	resourceDescName := resourceFields[1].Descriptor()
	// resource.NameValidator is a validator for the "name" field. It is called by the builders before save.
	resource.NameValidator = func() func(string) error {
		validators := resourceDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// resourceDescAPIVersion is the schema descriptor for api_version field.
	resourceDescAPIVersion := resourceFields[2].Descriptor()
	// resource.DefaultAPIVersion holds the default value on creation for the api_version field.
	resource.DefaultAPIVersion = resourceDescAPIVersion.Default.(string)
	// resourceDescKind is the schema descriptor for kind field.
	resourceDescKind := resourceFields[3].Descriptor()
	// resource.KindValidator is a validator for the "kind" field. It is called by the builders before save.
	resource.KindValidator = resourceDescKind.Validators[0].(func(string) error)
	// resourceDescResourceType is the schema descriptor for resource_type field.
	resourceDescResourceType := resourceFields[4].Descriptor()
	// resource.ResourceTypeValidator is a validator for the "resource_type" field. It is called by the builders before save.
	resource.ResourceTypeValidator = resourceDescResourceType.Validators[0].(func(string) error)
	// resourceDescCreatedAt is the schema descriptor for created_at field.
	resourceDescCreatedAt := resourceFields[7].Descriptor()
	// resource.DefaultCreatedAt holds the default value on creation for the created_at field.
	resource.DefaultCreatedAt = resourceDescCreatedAt.Default.(func() time.Time)
	// resourceDescUpdatedAt is the schema descriptor for updated_at field.
	resourceDescUpdatedAt := resourceFields[8].Descriptor()
	// resource.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	resource.DefaultUpdatedAt = resourceDescUpdatedAt.Default.(func() time.Time)
	// resource.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	resource.UpdateDefaultUpdatedAt = resourceDescUpdatedAt.UpdateDefault.(func() time.Time)
	// resourceDescResourceVersion is the schema descriptor for resource_version field.
	resourceDescResourceVersion := resourceFields[9].Descriptor()
	// resource.DefaultResourceVersion holds the default value on creation for the resource_version field.
	resource.DefaultResourceVersion = resourceDescResourceVersion.Default.(string)
}
